<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo SEO</title>
      <link href="/posts/1f62d2d5/"/>
      <url>/posts/1f62d2d5/</url>
      
        <content type="html"><![CDATA[<p>在搭建hexo博客后，如果想要提高我们博客的搜索量，需要做一些优化搜索引擎的工作，以便我们的博客获得更高的曝光量</p><h2 id="将网站链接提交到百度"><a href="#将网站链接提交到百度" class="headerlink" title="将网站链接提交到百度"></a>将网站链接提交到百度</h2><p><a href="https://www.sousuoyinqingtijiao.com/baidu/tijiao/">百度搜索引擎提交入口</a></p><p>有三种验证方式，选择HTML方式，将其添加到主题的<code>head.swing</code>文件中</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"baidu-site-verification"</span> <span class="attr">content</span>=<span class="string">"code-iqJOekpmDl"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="给站点添加sitemap"><a href="#给站点添加sitemap" class="headerlink" title="给站点添加sitemap"></a>给站点添加sitemap</h2><ol><li><p>Hexo安装sitemap</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save <span class="comment">#sitemap.xml适合提交给谷歌搜素引擎</span></span><br><span class="line">npm install hexo-generator-baidu-sitemap --save <span class="comment">#baidusitemap.xml适合提交百度搜索引擎</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>在站点配置文件<code>_config.yml</code>中添加代码</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动生成sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>修改站点配置<code>_config.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://yoursite</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>Hexo编译</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></tbody></table></figure><p>会在<code>/public</code>目录下生成<code>sitemap.xml</code>和<code>baidusitemap.xml</code></p></li><li><p>提交sitemap到站长平台</p><p>百度站长平台sitemap提交是邀请制，并没有对所有站长开发，只有网站到一定等级百度才会在你后台开放sitemap到入口</p></li></ol><h2 id="添加蜘蛛协议"><a href="#添加蜘蛛协议" class="headerlink" title="添加蜘蛛协议"></a>添加蜘蛛协议</h2><ol><li><p>新建robots.txt文件，添加一下内容，把robot.txt放在hexo站点的souce文件下</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span> hexo robots.txt</span><br><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line"></span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: https://zsyyblog.com/sitemap.xml</span><br><span class="line">Sitemap: https://zsyyblog.com/baidusitemap.xml</span><br></pre></td></tr></tbody></table></figure></li><li><p>在百度站长平台监测并更新robots</p><p>提示检测到您更新了robots文件即成功</p></li></ol><h2 id="给出站链接添加”nofollow“标签"><a href="#给出站链接添加”nofollow“标签" class="headerlink" title="给出站链接添加”nofollow“标签"></a>给出站链接添加”nofollow“标签</h2><p><code>nofollow</code>标签谷歌领头创新的一个“反垃圾链接”标签，并被百度、yahoo等各大搜索引擎广泛支持，应用<code>nofollow</code>标签的目的是：用于指示搜索引擎不要抓取网页上带有<code>nofollow</code>属性的任何出站链接，以减少垃圾链接的分散网络权重</p><p>以Hexo的NexT主题为例，需要修改两处</p><ol><li><p>找到footer.swig，作一下修改</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">{{ __('footer.powered', '<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"theme-link"</span> <span class="attr">href</span>=<span class="string">"http://hexo.io"</span>&gt;</span>Hexo<span class="tag">&lt;/<span class="name">a</span>&gt;</span>') }}</span><br><span class="line">改成</span><br><span class="line">{{ __('footer.powered', '<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"theme-link"</span> <span class="attr">href</span>=<span class="string">"http://hexo.io"</span> <span class="attr">rel</span>=<span class="string">"external nofollow"</span>&gt;</span>Hexo<span class="tag">&lt;/<span class="name">a</span>&gt;</span>') }}</span><br><span class="line"></span><br><span class="line">将下面代码</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"theme-link"</span> <span class="attr">href</span>=<span class="string">"https://github.com/iissnan/hexo-theme-next"</span>&gt;</span></span><br><span class="line">改成</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"theme-link"</span> <span class="attr">href</span>=<span class="string">"https://github.com/iissnan/hexo-theme-next"</span> <span class="attr">rel</span>=<span class="string">"external nofollow"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>修改sidebar.swig</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"{{ link }}"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>{{ name }}<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">改成</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"{{ link }}"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"external nofollow"</span>&gt;</span>{{ name }}<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">将下面代码</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://creativecommons.org/licenses/{{ theme.creative_commons }}/4.0"</span> <span class="attr">class</span>=<span class="string">"cc-opacity"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">改成</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://creativecommons.org/licenses/{{ theme.creative_commons }}/4.0"</span> <span class="attr">class</span>=<span class="string">"cc-opacity"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"external nofollow"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>可以使用chinaz站长工具进行各项检测</p></li></ol><h2 id="keywords和description"><a href="#keywords和description" class="headerlink" title="keywords和description"></a>keywords和description</h2><p>在<code>/scaffolds/post.md</code>中添加如下代码，用于生成文章的关键字和描述</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keywords: </span><br><span class="line">description:</span><br></pre></td></tr></tbody></table></figure><p>在<code>head.swig</code>有如下代码，用于生成文章keywords。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{% if page.keywords %}</span><br><span class="line">  &lt;meta name="keywords" content="{{ page.keywords }}" /&gt;</span><br><span class="line">{% elif page.tags and page.tags.length %}</span><br><span class="line">  &lt;meta name="keywords" content="{% for tag in page.tags %}{{ tag.name }},{% endfor %}" /&gt;</span><br><span class="line">{% elif theme.keywords %}</span><br><span class="line">  &lt;meta name="keywords" content="{{ theme.keywords }}" /&gt;</span><br><span class="line">{% endif %}</span><br></pre></td></tr></tbody></table></figure><p>在post.swig中找到</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">{% if post.description %}</span><br><span class="line">将以下代码去掉：</span><br><span class="line">{% if post.description %}</span><br><span class="line">  {{ post.description }}</span><br><span class="line">  &lt;div class="post-more-link text-center"&gt;</span><br><span class="line">    &lt;a class="btn" href="{{ url_for(post.path) }}"&gt;</span><br><span class="line">      {{ __('post.read_more') }} &amp;raquo;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>否则首页文章摘要就会变成文章的description</p><h2 id="首页title优化"><a href="#首页title优化" class="headerlink" title="首页title优化"></a>首页title优化</h2><p>更改<code>index.swig</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% block title %} {{ config.title }} {% endblock %}</span><br><span class="line">改成</span><br><span class="line">{% block title %} {{ config.title }} - {{ theme.description }} {% endblock %}</span><br></pre></td></tr></tbody></table></figure><p>这会使你的首页标题更加符合网站名称-网站描述这习惯</p><h2 id="修改文章链接"><a href="#修改文章链接" class="headerlink" title="修改文章链接"></a>修改文章链接</h2><p>Hexo默认文章链接形式为<code>domain/year/month/day/postname</code>，默认是一个斯基url，并且可能造成url过长，对搜索引擎十分不友好，我们可以改成<code>domain/postname</code>形式</p><p>编辑站点<code>_config.yml</code>文件，修改其中的<code>permalink</code>字段改为<code>permalink::title.html</code>即可</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim常用命令</title>
      <link href="/posts/8c31560b/"/>
      <url>/posts/8c31560b/</url>
      
        <content type="html"><![CDATA[<p>vim是一款文本编辑器</p><p>最开始的开发只是为了复制vi的功能，后来发展成为vi的改良版本</p><p>作为一款好用的文本编辑器在程序员中广泛使用，尤其被unix系统用户喜爱</p><h2 id="vim模式"><a href="#vim模式" class="headerlink" title="vim模式"></a>vim模式</h2><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p><strong>进入命令模式</strong>：输入i，a，o；I，A，O</p><p>i，a：光标前后</p><p>I，A：当前行首和末</p><p>o，O：当前行行上下行</p><p><strong>进入尾行模式</strong>：输入：</p><p><strong>撤销和重做</strong>：u和ctrl+r</p><hr><h4 id="控制光标"><a href="#控制光标" class="headerlink" title="控制光标"></a>控制光标</h4><p>H，J，K，L分别控制光标左，上，下，右</p><p>nH：当前光标向左移动n次（J，K，L同理）</p><p>^，$移动光标到行首行尾</p><p>gg，G移动光标到文本首和尾</p><p>nG：移动到n行（等同于在<strong>尾行模式</strong>下输入：n+回车）</p><p>ctrl+f：下一页</p><p>ctrl+b：上一页 </p><p>ctrl+u：上一面 </p><p>ctrl+d：下一面</p><hr><h4 id="剪贴板操作"><a href="#剪贴板操作" class="headerlink" title="剪贴板操作"></a>剪贴板操作</h4><p>dd，yy，p：剪切，复制，粘贴当前行</p><blockquote><p>Tips：前面可加数字n表示重复几次</p></blockquote><h3 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h3><p><strong>退出插入模式</strong>：ESC</p><h3 id="尾行模式"><a href="#尾行模式" class="headerlink" title="尾行模式"></a>尾行模式</h3><p><strong>退出尾行模式</strong>：回车或者ESC</p><h4 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h4><p>/，？：向上和向下查找</p><blockquote><p>[n1,n2]s/（被替换的内容）/（要替换的内容）/[g]</p><p>[n1,n2]表示范围，不写默认当前行；[g]表示全局替换，不写默认只替换每行第一个内容</p></blockquote><h3 id="其他模式"><a href="#其他模式" class="headerlink" title="其他模式"></a>其他模式</h3><p>替换模式和可视模式</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac上运行Pkhex</title>
      <link href="/posts/299de451/"/>
      <url>/posts/299de451/</url>
      
        <content type="html"><![CDATA[<p>对于宝可梦玩家来说，使用魔法来调整宠物的属性几乎是必须的（除非你浑身是肝，或者你只是一个pve玩家），Pkhex因为是基于<code>.NET</code>开发，所以在Windows上使用它是十分方便的，但是在Linux以及mac则需要借助wine，因为我使用的是mac系统，下面将介绍如何在mac上使用pkhex。</p><h2 id="安装XQuartz"><a href="#安装XQuartz" class="headerlink" title="安装XQuartz"></a>安装XQuartz</h2><p><a href="https://www.xquartz.org/">xquartz</a>是wine的依赖，想要安装wine，它是必须的。</p><h2 id="安装wine"><a href="#安装wine" class="headerlink" title="安装wine"></a>安装wine</h2><p>下载<a href="https://dl.winehq.org/wine-builds/macosx/download.html">Wine Development</a>应用程序</p><h2 id="安装最新版-NET"><a href="#安装最新版-NET" class="headerlink" title="安装最新版.NET"></a>安装最新版.NET</h2><p>下载最新版本的<a href="https://dotnet.microsoft.com/en-us/download/dotnet/8.0">.NET</a>，右键单击文件，转到“打开方式…”并选择 Wine Devel</p><blockquote><p>tip: 强烈建议将打开 .exe 文件的应用程序更改为 Wine Devel。右键单击 &gt; 获取信息 &gt; 打开方式 - 并从弹出列表中选择“Wine Devel”</p><p>如果 Wine Devel 呈灰色，请取消勾选“推荐应用”并选择 Wine Devel。从现在起，任何 .exe 文件都将自动使用 Wine Devel 打开</p></blockquote><h2 id="使用Pkhex"><a href="#使用Pkhex" class="headerlink" title="使用Pkhex"></a>使用Pkhex</h2><p>下载<a href="https://projectpokemon.org/home/files/file/2774-pkhex-for-mac/">PKHeX for Mac</a>并将其拖到您的应用程序文件夹并打开</p><p>大功告成🎉</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>其他使用修改Pkhex的方法</p><p><a href="https://github.com/arleypadua/PKHeX.CLI/releases">只需在此处</a> 下载适用于 Linux 的工件，解压缩并在控制台中运行命令 pkhex-cli</p><blockquote><p>了解更多信息，这是带有自述文件的项目源代码</p><p><a href="https://github.com/arleypadua/PKHeX.CLI">https://github.com/arleypadua/PKHeX.CLI</a></p></blockquote><p>基于网络的版本：</p><p><a href="https://pkhex-web.github.io/">https://pkhex-web.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> game </category>
          
          <category> pokemon </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> pokemon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Butterfly增加文章双栏布局</title>
      <link href="/posts/9f9978a1/"/>
      <url>/posts/9f9978a1/</url>
      
        <content type="html"><![CDATA[<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-butterfly-article-double-row --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"></span><br><span class="line">cnpm i hexo-butterfly-article-double-row --save</span><br></pre></td></tr></tbody></table></figure><h2 id="修改站点配置"><a href="#修改站点配置" class="headerlink" title="修改站点配置"></a>修改站点配置</h2><p>修改站点根目录下的配置文件<code>_config.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">butterfly_article_double_row:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure><p>查看效果</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建博客底层原理</title>
      <link href="/posts/d24d3c28/"/>
      <url>/posts/d24d3c28/</url>
      
        <content type="html"><![CDATA[<p>在B站通过up主程序羊了解到了Hexo，并且通过视频教程一步步搭建了个人博客，逞着兴趣正浓，网上看了许多关于Hexo的有关资料，对Hexo有了更多的了解。</p><blockquote><p>Hexo的优缺点</p></blockquote><p>优点：</p><ul><li>生态丰富，主题多</li><li>相关文档多，解决bug有优势</li><li>通过修改yaml配置文件修改样式简单</li></ul><p>缺点：</p><ul><li>初次配置会遇到很多bug，对新生和非专业人员不友好</li><li>每次发布文章都需要重新部署，没有后台管理系统</li></ul><p>相当一部分Hexo是搭建在LNMP或LAMP环境下，LNMP指linux+nginx+mysql+php,这是一款非常强大的环境套件，nginx以其轻量而高效受到建站者青睐。</p><h2 id="Github-page"><a href="#Github-page" class="headerlink" title="Github page"></a>Github page</h2><p>Hexo搭建的博客项目源码托管在github，并享受github pages服务。</p><p>GitHub pages简称pages服务，每个仓库都有一个pages服务，可用来展示项目，通过简单的设置项目的index.html，并以此做为入口供用户参观访问。可是一个相当实用的功能呀！大部分的 pages 服务都是用来搭建个人博客的。言外之意不仅能搭建博客，还能做些其他的事情~</p><p>为什么需要Pages技术</p><p>生成博客的页面有动、静态页面之分</p><p>著名的博客 wordpress ，既是动态页面生成的博客，其思路是php+Mysql</p><p>博客hexo生成的是静态页面，而Github pages又支持静态页面的解析。因此二者一拍即合能够用来生成html拼合成博客。</p><blockquote><p>静态页面意味着评论、分享功能依赖第三方插件，但它带来的轻量、高效是动态页面不及的！</p></blockquote><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/8/12/1a5437eb122fc14fc88b1920aed5dcca~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="hexo官网">hexo官网</p><p>在 Hexo 的官网，我们可以直观的看到对 Hexo 的介绍：<strong>快速、简洁且高效的博客框架</strong></p><p>在 Hexo 的文档中，我们可以找到官方对 Hexo 的定义：</p><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>在官方文档中安装了 Hexo 中我们就安装了 Hexo，然后我们就可以看到文档结构如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml      // 站点配置文件</span><br><span class="line">├── db.json          // 缓存文件</span><br><span class="line">├── node_modules     // 安装的插件以及hexo所需的一些nodejs模块</span><br><span class="line">├── package.json     // 项目的依赖文件</span><br><span class="line">├── scaffolds        // 模版文件</span><br><span class="line">├── source           // 源文件，用来存放你的文章 md 文件</span><br><span class="line">└── themes           // 主题文件</span><br></pre></td></tr></tbody></table></figure><p>然后我们可以安装主题，比我我安装的 NexT 主题，安装完之后会在 <code>themes</code> 下面产生一个 next 文件存放主题中的内容，文档结构如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.en.md       // READEME 英文版</span><br><span class="line">├── README.md          // READEME 中文文件</span><br><span class="line">├── _config.yml        // 主题配置文件</span><br><span class="line">├── bower.json</span><br><span class="line">├── gulpfile.coffee</span><br><span class="line">├── languages         // 多语言配置文件</span><br><span class="line">├── layout            // 模板文件</span><br><span class="line">├── package.json      // 项目的依赖文件</span><br><span class="line">├── scripts           // 主题的脚本文件</span><br><span class="line">├── source            // 主题的资源文件 CSS IMG</span><br><span class="line">└── test</span><br></pre></td></tr></tbody></table></figure><h2 id="Hexo-的工作原理"><a href="#Hexo-的工作原理" class="headerlink" title="Hexo 的工作原理"></a>Hexo 的工作原理</h2><p>这里我们来分析一下 Hexo 每次部署的流程</p><ol><li>hexo g：生成静态文件。将我们的数据和界面相结合生成静态文件的过程。会遍历主题文件中的 <code>source</code> 文件夹（js、css、img 等静态资源），然后建立索引，然后根据索引生成 <code>pubild</code> 文件夹中，此时的 <code>publid</code> 文件是由 html、 js、css、img 建立的纯静态文件可以通过 <code>index.html</code> 作为入口访问你的博客。</li><li>hexo d：部署文件。部署主要是根据在 <code>_config.yml</code> 中配置的 <code>git</code> 仓库或者 <code>coding</code> 的地址，将 <code>public</code> 文件上传至 github 或者 coding 中。然后再根据上面的 github 提供的 pages 服务呈现出页面。当然你也可以直接将你生成的 <code>public</code> 文件上传至你自己的服务器上。</li></ol><h2 id="Hexo-的模板引擎"><a href="#Hexo-的模板引擎" class="headerlink" title="Hexo 的模板引擎"></a>Hexo 的模板引擎</h2><blockquote><p>模板引擎的作用，就是将界面与数据分离。最简单的原理是将模板内容中指定的地方替换成数据，实现业务代码与逻辑代码分离。</p></blockquote><p>我们可以注意到，在 Hexo 中，<code>source</code> 文件夹和 <code>themes</code> 文件夹是在同级的，我们就可以将 <code>source</code> 文件夹理解为数据库，而主题文件夹相当于 界面。然后我们 <code>hexo g</code> 就将我们的数据和界面相结合生成静态文件 <code>public</code>。</p><p>Hexo 的模板引擎是默认使用 ejs 编写的。hexo首先会解析 md 文件，然后根据 layout 判断布局类型，再调用其他的文件，这样每一块的内容都是独立的，提高代码的复用性。最终会生成一个 html 页面。</p><p>模板文件在 <code>layout</code> 文件夹下，<code>layout</code> 文件文档结构如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _custom                           // 通用布局</span><br><span class="line">├── _layout.swig                      // 默认布局布局</span><br><span class="line">├── _macro                            // 插件模板</span><br><span class="line">├── _partials                         // 局部布局</span><br><span class="line">├── _scripts                          // script模板</span><br><span class="line">├── _third-party                      // 第三方插件模板</span><br><span class="line">├── archive.swig                      // 归档模板</span><br><span class="line">├── category.swig                     // 分类模板</span><br><span class="line">├── index.swig                        // 首页模板</span><br><span class="line">├── page.swig                         // 其他模板</span><br><span class="line">├── photo.swig                        // 照片模板（自定义）</span><br><span class="line">├── post.swig                         // 文章模板</span><br><span class="line">├── schedule.swig                     // 归档模板</span><br><span class="line">└── tag.swig                          // 标签模板</span><br></pre></td></tr></tbody></table></figure><blockquote><p>每个模板都默认使用layout布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。</p></blockquote><p>在我们新建页面或者新建文章的使用可以选定我们使用的模板。<code>hexo new [layout] &lt;title&gt;</code>就会使用对应的模板。</p><p>其中 <code>_layout.swig</code> 是通用模板，里面引入了 <code>head</code>、<code>footer</code> 等公共组件，然后在其他的模板中会引入这个 <code>_layout.swig</code> 通用模板，比如 <code>post.swig</code> 模板</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> {% extends '_layout.swig' %}</span><br><span class="line">{% import '_macro/post.swig' as post_template %}</span><br><span class="line">{% import '_macro/sidebar.swig' as sidebar_template %}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">{% block title %} {{ page.title }} | {{ config.title }} {% endblock %}</span><br><span class="line"></span><br><span class="line">{% block page_class %}page-post-detail{% endblock %}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">{% block content %}</span><br><span class="line"></span><br><span class="line">  &lt;div id="posts" class="posts-expand"&gt;</span><br><span class="line">    {{ post_template.render(page) }}</span><br><span class="line"></span><br><span class="line">    &lt;div class="post-spread"&gt;</span><br><span class="line">      {% if theme.jiathis %}</span><br><span class="line">        {% include '_partials/share/jiathis.swig' %}</span><br><span class="line">      {% elseif theme.baidushare %}</span><br><span class="line">        {% include '_partials/share/baidushare.swig' %}</span><br><span class="line">      {% elseif theme.add_this_id %}</span><br><span class="line">        {% include '_partials/share/add-this.swig' %}</span><br><span class="line">      {% elseif theme.duoshuo_shortname and theme.duoshuo_share %}</span><br><span class="line">        {% include '_partials/share/duoshuo_share.swig' %}</span><br><span class="line">      {% endif %}</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">{% endblock %}</span><br><span class="line"></span><br><span class="line">{% block sidebar %}</span><br><span class="line">  {{ sidebar_template.render(true) }}</span><br><span class="line">{% endblock %}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">{% block script_extra %}</span><br><span class="line">  {% include '_scripts/pages/post-details.swig' %}</span><br><span class="line">{% endblock %}</span><br></pre></td></tr></tbody></table></figure><p>其中在第 11 行</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% block content %} </span><br><span class="line">    // 中间为该模板自定义内容</span><br><span class="line">{% endblock %}</span><br></pre></td></tr></tbody></table></figure><h2 id="数据的填充"><a href="#数据的填充" class="headerlink" title="数据的填充"></a>数据的填充</h2><p>数据的填充主要是 <code>hexo -g</code> 的时候将数据传递给 swig 模板，然后再由 swig 模板填充到 HTML 中。</p><h3 id="配置文件中的数据"><a href="#配置文件中的数据" class="headerlink" title="配置文件中的数据"></a>配置文件中的数据</h3><p>Hexo 的配置文件 <code>_config.yml</code> 使用 <a href="https://link.juejin.cn/?target=http://docs.ansible.com/ansible/latest/YAMLSyntax.html">yml语法</a> 。例如博客的名字、副标题等等之类。这些数据项组织在 config 对象中。可以数字、字符串、对象、数组，</p><h3 id="配置文件中数据的使用"><a href="#配置文件中数据的使用" class="headerlink" title="配置文件中数据的使用"></a>配置文件中数据的使用</h3><p>如果要在模板中使用某个具体的值，比如字符串、数字、逻辑变量或者对象的某个成员，可以在主题的模板文件 swig 中直接使用：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% block title %} {{ page.title }} | {{ config.title }} {% endblock %}</span><br></pre></td></tr></tbody></table></figure><h3 id="Hexo-中的变量"><a href="#Hexo-中的变量" class="headerlink" title="Hexo 中的变量"></a>Hexo 中的变量</h3><p>Hexo 提供了很多的变量，比如我们上面使用的 <code>page</code> 变量，还有 <code>site</code> 变量等，这些都是 Hexo 提供的，我们可以拿来直接使用的，常用的变量有：</p><ul><li><pre><code>site<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">：对应整个网站的变量，一般会用到 </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>site.posts.length</code></pre><p> 制作分页器。</p><ul><li><code>site.posts</code> 所有文章</li><li><code>site.pages</code> 所有分页</li><li><code>site.categories</code> 所有分类</li><li><code>site.tags</code> 所有标签</li></ul></li><li><p><code>page</code>：存放当前页面的信息，例如我在 <code>index.ejs</code> 中使用 <code>page.posts</code> 获取了当前页面的所有文章而不是使用 <code>site.posts</code>。</p></li><li><p><code>config</code>：<code>config</code> 变量我们在主目录下配置文件 <code>_config.yml</code> 中保存的信息。</p></li><li><p><code>theme</code>：<code>theme</code> 变量是我们在主题目录下配置文件 <code>_config.yml</code> 中保存的信息。</p></li><li><p><code>path</code>：当前页面的路径（不含根路径）。</p></li><li><p><code>url</code>：页面完整网址。</p></li></ul><h4 id="页面变量"><a href="#页面变量" class="headerlink" title="页面变量"></a>页面变量</h4><p>Page(page) 这里指的是 <code>hexo new page</code> 创建的那个页面</p><ul><li><code>page.title</code>：文章标题</li><li><code>page.date</code>：文章建立日期</li><li><code>page.updated</code>：文章更新日期</li><li><code>page.comments</code>：留言是否开启</li><li><code>page.layout</code>：布局名称</li><li><code>page.content</code>：文章完整内容</li><li><code>page.excerpt</code>：文章摘要</li><li><code>page.more</code>：除了摘要的其他内容</li><li><code>page.source</code>：文章原始路劲</li><li><code>page.full_source</code>：文章完整原始路径</li><li><code>page.path</code>：文章网址（不含根路径），通常在主题中使用url_for(page.path)</li><li><code>page.permalink</code>：文章永久网址</li><li><code>page.prev</code>：上一篇文章，如果此为第一篇文章则为null</li><li><code>page.next</code>：下一篇文章，如果此为最后一篇文章则为null</li><li><code>page.raw</code>：文章原始内容</li><li><code>page.photos</code>：文章的照片（用于相册）</li><li><code>page.link</code>：文章的外链（用于链接文章）</li></ul><h4 id="Post-post-变量"><a href="#Post-post-变量" class="headerlink" title="Post(post) 变量"></a>Post(post) 变量</h4><p>这里指的是文章页面，与page布局相同，添加如下变量：</p><ul><li><code>page.pulished</code>：文章非草稿为true</li><li><code>page.categories</code>：文章分类</li><li><code>page.tags</code>：文章标签</li></ul><h4 id="首页-index"><a href="#首页-index" class="headerlink" title="首页(index)"></a>首页(index)</h4><ul><li><code>page.per_page</code>：每一页显示的文章数</li><li><code>page.total</code>：文章数量</li><li><code>page.current</code>：当前页码</li><li><code>page.current_url</code>：当前页的URL</li><li><code>page.posts</code>：当前页的文章</li><li><code>page.prev</code>：前一页页码，如果为第一页，该值为0</li><li><code>page.prev_link</code>：前一页URL，如果为第一页，则为’’</li><li><code>page.next</code>：后一页页码，如果为最后一页，则为0</li><li><code>page.next_link</code>：后一页URL，如果为最后一页，则为’’</li><li><code>page.path</code>：当前页网址（不含根路径），通常在主题中使用url_for(page.path)</li></ul><h4 id="归档页-archive"><a href="#归档页-archive" class="headerlink" title="归档页(archive)"></a>归档页(archive)</h4><p>与index布局相同，但是新增如下变量：</p><ul><li><code>archive</code> 为true</li><li><code>year</code> 归档年份（4位）</li><li><code>month</code> 归档月份（不包含0）</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>非要说 Hexo 是什么的话，我觉得就是生成静态页面的工具，可以将我们使用 markdown 编写的内容与主题模板相结合，生成 HTML 静态文件。并且可以和 github 的 pages 或者其他可以将静态页面展现出来的服务（例如 coding 的 pages 服务）相结合，一键部署。</p><p>再深入一点讲 Hexo 的原理的话，那就应该是使用 <a href="https://link.juejin.cn/?target=http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt">yaml 语言</a> 做配置文件，使用 <a href="https://link.juejin.cn/?target=http://www.360doc.com/content/16/0115/10/597197_528136785.shtml">ejs</a> 或者 <a href="https://link.juejin.cn/?target=https://www.ibm.com/developerworks/cn/aix/library/au-swig/">swig</a> 作为主题模板，与使用 markdown 书写的内容结合，生成静态 HTML 文件。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo源码设计模式</title>
      <link href="/posts/eab89b12/"/>
      <url>/posts/eab89b12/</url>
      
        <content type="html"><![CDATA[<p>hexo是一个快速、简洁且高效的博客框架，实际上不仅仅如此，他是一个js语言的编写的静态网站生成器，主要作用是解析markdown语法，配合模版引擎，快速生成静态网站。同时可以自定义主题，引用第三方插件，除了搭建个人博客外，Hexo还被许许多多的项目拿来生成API文档。</p><h2 id="框架特色"><a href="#框架特色" class="headerlink" title="框架特色"></a>框架特色</h2><p>Node.js运行环境，速度极快，扩展能力强，强大的插件系统，可配置性高，一件编译部署，适用于博客，静态个人网站，开源项目文档，最受欢迎的JS静态网站生成器。</p><blockquote><p>Tip: 本文所有代码均为伪代码</p></blockquote><h2 id="Hexo命令行设计"><a href="#Hexo命令行设计" class="headerlink" title="Hexo命令行设计"></a>Hexo命令行设计</h2><p>在命令行模块，Hexo选择使用miniist来解析命令行参数得到一个js对象，并建立一个Hexo实例对象call方法传递命令行指令。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> args = <span class="title function_">minimist</span>(process.<span class="property">argv</span>.<span class="title function_">slice</span>(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">var</span> cmd = args.<span class="property">_</span>.<span class="title function_">shift</span>()</span><br><span class="line"><span class="keyword">var</span> hexo = <span class="keyword">new</span> <span class="title class_">Hexo</span>()</span><br><span class="line">hexo.<span class="title function_">init</span>()</span><br><span class="line">hexo.<span class="title function_">call</span>(cmd, args)</span><br></pre></td></tr></tbody></table></figure><h2 id="Hexo入口模块设计"><a href="#Hexo入口模块设计" class="headerlink" title="Hexo入口模块设计"></a>Hexo入口模块设计</h2><p>同大多数框架相同，Hexo采用构造-原型组合模式定义类，采用组合继承的方式继承Node中EventEmitter模块，更容易通过<code>on</code>与<code>emit</code>发布和订阅事件。在实例化阶段，保存所编译文件存放路径、输出路径及其他脚步、插件、主题等所处路径，保存环境变量，即命令行参数、版本号等基本信息。创建扩展对象，按不同的功能进行分类，作用是创建store，用于注册句柄，获取句柄，以便后续编译过程调用，在Hexo中，扩展类型包括控制台（Console）、部署器（Deployer）、过滤器（Fitter）、生成器（Generator）、辅助函数（Helper）、处理器（Processer）、渲染引擎（Renderer）等等。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> args = <span class="title function_">minimist</span>(process.<span class="property">argv</span>.<span class="title function_">slice</span>(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">var</span> cmd = args.<span class="property">_</span>.<span class="title function_">shift</span>()</span><br><span class="line"><span class="keyword">var</span> hexo = <span class="keyword">new</span> <span class="title class_">Hexo</span>()</span><br><span class="line">hexo.<span class="title function_">init</span>()</span><br><span class="line">hexo.<span class="title function_">call</span>(cmd, args)</span><br></pre></td></tr></tbody></table></figure><h2 id="Hexo编译模块设计"><a href="#Hexo编译模块设计" class="headerlink" title="Hexo编译模块设计"></a>Hexo编译模块设计</h2><p>预期用户命令行接口</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>首先前往Hexo扩展对象Console中注册<code>generate</code>函数</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">register</span>(<span class="string">'generate'</span>, <span class="string">'Generate static files.'</span>, {</span><br><span class="line">  <span class="attr">options</span>: [</span><br><span class="line">    {<span class="attr">name</span>: <span class="string">'-d, --deploy'</span>, <span class="attr">desc</span>: <span class="string">'Deploy after generated'</span>},</span><br><span class="line">    {<span class="attr">name</span>: <span class="string">'-f, --force'</span>, <span class="attr">desc</span>: <span class="string">'Force regenerate'</span>},</span><br><span class="line">    {<span class="attr">name</span>: <span class="string">'-w, --watch'</span>, <span class="attr">desc</span>: <span class="string">'Watch file changes'</span>}</span><br><span class="line">  ]</span><br><span class="line">}, <span class="built_in">require</span>(<span class="string">'./generate'</span>));</span><br></pre></td></tr></tbody></table></figure><p><code>generate</code>函数用于生成目标文件夹，从Hexo的路由模块中取得所有需要生成目标文件的路径，调用<code>fs</code>输出文件，在此之前，首先对源文件进行预处理，把路径写入路由。由于Hexo本身设计的特点，源文件又分为内容和主题两部分，分别存放在source和theme文件夹，所以得调用<code>process</code>函数分别对它们进行预处理</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">generate</span>(<span class="params">hexo</span>) {</span><br><span class="line">  hexo.<span class="property">source</span>.<span class="title function_">process</span>();</span><br><span class="line">  hexo.<span class="property">theme</span>.<span class="title function_">process</span>();</span><br><span class="line">  routerList.<span class="title function_">forEach</span>(<span class="function"><span class="params">path</span> =&gt;</span> <span class="title function_">writeFile</span>(path))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Hexo抽象出一层公用模块用来管理所有处理器，命名为Box，相当于一个容器，统一管理处理器的添加删除执行，监控，并分别为source和theme创建实例，Box原型如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Box</span>(<span class="params">base</span>) {</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">base</span> = base;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">processors</span> = [];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title class_">Box</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addProcessor</span> = <span class="keyword">function</span>(<span class="params">pattern, fn</span>) {</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">processors</span>.<span class="title function_">push</span>({</span><br><span class="line">    <span class="attr">pattern</span>: pattern,</span><br><span class="line">    <span class="attr">process</span>: fn</span><br><span class="line">  });</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="title class_">Box</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">process</span> = <span class="keyword">function</span>(<span class="params">callback</span>) {</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">processors</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">processor</span> =&gt;</span> processor.<span class="title function_">process</span>())</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>有了Box容器，接下来要做的就是往容器中添加处理器，同样，用插件的形式往扩展对象extend中注册句柄，在注入到Box容器中。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">hexo</span>) {</span><br><span class="line">  <span class="keyword">var</span> processor = hexo.<span class="property">extend</span>.<span class="property">processor</span>;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">require</span>(<span class="string">'./asset'</span>)(hexo);</span><br><span class="line">  processor.<span class="title function_">register</span>(obj.<span class="property">pattern</span>, obj.<span class="property">process</span>); <span class="comment">// pattern为文件名匹配格式</span></span><br><span class="line">  ...</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>以markdown文件处理为例，成功匹配到文件扩展名后，调用hexo-front-matter利用正则表达式匹配来解析文件，分离顶部元数据与主题内容，类似于<a href="https://github.com/jonschlinkert/gray-matter">gray-matter</a>，把元数据与内容以key/value的形式转化为一个js对象。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理器</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">hexo</span>) {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">pattern</span>: <span class="regexp">/\.md/</span>,</span><br><span class="line">    <span class="attr">process</span>: <span class="keyword">function</span>(<span class="params">path</span>) {</span><br><span class="line">      <span class="title function_">readFile</span>(path, <span class="keyword">function</span>(<span class="params">err, content</span>) {</span><br><span class="line">        <span class="keyword">var</span> data = <span class="built_in">require</span>(<span class="string">'hexo-front-matter'</span>)(content)</span><br><span class="line">        data.<span class="property">source</span> = path;</span><br><span class="line">        data.<span class="property">raw</span> = content;</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">      }</span><br><span class="line">    }  </span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">// markdown文件</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line">title: hello</span><br><span class="line"><span class="section">layout: home</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="section"># Hexo</span></span><br><span class="line">A fast, simple &amp; powerful blog framework</span><br></pre></td></tr></tbody></table></figure><p>解析成 =&gt;</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">title</span>: <span class="string">'hello'</span>,</span><br><span class="line">  <span class="attr">layout</span>: <span class="string">'home'</span>,</span><br><span class="line">  <span class="attr">_content</span>: <span class="string">'# Hexo\nA fast, simple &amp; powerful blog framework'</span>,</span><br><span class="line">  <span class="attr">source</span>: <span class="string">'README.md'</span>,</span><br><span class="line">  <span class="attr">raw</span>: <span class="string">'---\ntitle: hello\n---\n# Hexo\nA fast, simple &amp; powerful blog framework'</span> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>下一步，Hexo定义了过滤器(Fitter)的概念，借鉴于WordPress，用于在模版渲染前后修改具体的数据，也可以把它看成一个钩子，例如使用<a href="https://github.com/markedjs/marked">marked</a>编译markdown文件内容。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo.<span class="title function_">execFilter</span>(<span class="string">'before_generate'</span>, <span class="keyword">function</span>(<span class="params">data</span>) {</span><br><span class="line">    hexo.<span class="property">render</span>.<span class="title function_">render</span>({</span><br><span class="line">      <span class="attr">text</span>: data.<span class="property">_content</span>,</span><br><span class="line">      <span class="attr">path</span>: data.<span class="property">source</span>,</span><br><span class="line">      <span class="attr">engine</span>: data.<span class="property">engine</span></span><br><span class="line">    });</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>转化后增加一条content属性，带有标签与类名的markdown html片段</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  title<span class="punctuation">:</span> 'hello'<span class="punctuation">,</span></span><br><span class="line">  layout<span class="punctuation">:</span> 'home'<span class="punctuation">,</span></span><br><span class="line">  _content<span class="punctuation">:</span> '# Hexo\nA fast<span class="punctuation">,</span> simple &amp; powerful blog framework'<span class="punctuation">,</span></span><br><span class="line">  content<span class="punctuation">:</span> '&lt;h1 id=<span class="string">"Hexo"</span>&gt;&lt;a href=<span class="string">"#Hexo"</span> class=<span class="string">"headerlink"</span>     title=<span class="string">"Hexo"</span>&gt;&lt;/a&gt;Hexo&lt;/h1&gt;&lt;p&gt;A fast<span class="punctuation">,</span> simple &amp; powerful blog   framework&lt;/p&gt;\n'<span class="punctuation">,</span></span><br><span class="line">  source<span class="punctuation">:</span> 'README.md'<span class="punctuation">,</span></span><br><span class="line">  raw<span class="punctuation">:</span> '---\ntitle<span class="punctuation">:</span> hello\n---\n# Hexo\nA fast<span class="punctuation">,</span> simple &amp; powerful blog framework' </span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>得倒页面数据后，进入模版引擎渲染阶段，Hexo本身不带模版引擎实现，需要借助第三方库，例如ejs，并通过一个适配器，把原接口转换为需求接口，向扩展对象extend.render中注册模版解析函数。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo.<span class="property">extend</span>.<span class="property">renderer</span>.<span class="title function_">register</span>(<span class="string">'ejs'</span>, <span class="string">'html'</span>, <span class="keyword">function</span>(<span class="params">data, locals</span>) {</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'ejs'</span>).<span class="title function_">render</span>(data, locals))</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>模版引擎解析所有函数存储在hexo.theme对象中，以文件名作为key，后续渲染只需匹配layout就能找到指定的渲染函数，注入locals变量（上面markdown解析后的js对象+扩展对象extend.helper定义的变量、函数），生成最终文本字符串。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> view = hexo.<span class="property">theme</span>.<span class="title function_">getView</span>(data.<span class="property">layout</span>);</span><br><span class="line">view.<span class="title function_">render</span>(locals)</span><br></pre></td></tr></tbody></table></figure><p>最后通过Node<code>fs</code>模块把最终文本字符串输出到public目标文件夹中，大功告成。</p><p>回顾整个工作流程，可以看作</p><p>cli =&gt; hexo init =&gt; plugin load =&gt; process =&gt; filter =&gt; render =&gt; generate</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p>Hexo有许多优秀设计模式</p><h3 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h3><p>Hexo引入了json数据库<a href="https://github.com/hexojs/warehouse">warehouse</a> ，也是作者自己开发的一个数据库驱动，API用法与Mongoose相差无几，在架构中的角色是充当一个中介者，存储临时数据，或者持久化数据存储，如博客的发表时间，还可以做完缓存层，比对文件的修改时间，跳过无修改文件的编译过程，减少二次编译的时间。</p><h3 id="异步方案"><a href="#异步方案" class="headerlink" title="异步方案"></a>异步方案</h3><p>大量异步回调文件操作会让代码丧失可读性，Hexo引入Promise库<a href="https://github.com/petkaantonov/bluebird">blurebird</a>，内置丰富API，很方便的处理异步的流程控制，如使用<code>Promise.promisify(require('fs'),readFile)</code>可以把原生<code>fs</code>异步函数包装成一个Promise对象，另外，随着Node7.6正式版发布，直接支持async/await语法，可以更优雅得处理异步问题。</p><h3 id="通用日志模块"><a href="#通用日志模块" class="headerlink" title="通用日志模块"></a>通用日志模块</h3><p>把Log划分为六个级别，’trace’,’debug’,’info’,’warn’,’error’,’fatal’，不同级别输出不同故事与颜色<a href="https://github.com/chalk/chalk">chalk</a>，并提供命令行接口，如果带有-debug字段，则Log自动降级为‘trace’级别</p><p>参考：<a href="https://juejin.cn/post/6844903469669679117">https://juejin.cn/post/6844903469669679117</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客框架简介</title>
      <link href="/posts/539ce4a8/"/>
      <url>/posts/539ce4a8/</url>
      
        <content type="html"><![CDATA[<p>博客是以网络为载体，简易迅速便捷地发布自己的心得，及时有效地与他人进行交流，丰富多彩的个性化展示的综合性平台。</p><h2 id="博客搭建方式"><a href="#博客搭建方式" class="headerlink" title="博客搭建方式"></a>博客搭建方式</h2><p>博客搭建方式可分为静态博客和动态博客。</p><p>静态博客：博文内容通过文档（如<code>.md</code>文件等）记录，通过工具编译成最终的html，css，js等动态文件，然后部署在静态server服务器或web托管至数据仓库（如：github），即可在互联网中被访问，不需要数据库支撑。</p><p>动态博客：以数据库技术为基础，博文内容通过数据库记录存储，主要特点体现在交互性；动不是指网页中页面元素或特效在动，而是与后台数据库进行交互和数据传递（如：注册登陆，评论，用户管理）</p><p>常见的博客框架</p><ul><li>静态框架<ul><li><a href="https://hexo.io/zh-cn/">Hexo</a></li><li><a href="https://www.gohugo.cn/">Hugo</a></li><li><a href="https://www.vuepress.cn/">VuePress</a></li><li><a href="https://www.jekyll.com.cn/">jekyll</a></li></ul></li><li>动态框架<ul><li><a href="https://wordpress.org/">WordPress</a></li><li><a href="https://typecho.org/">Typecho</a></li><li><a href="https://www.halo.run/">Halo</a></li><li><a href="https://www.halo.run/">Salo</a></li></ul></li></ul><h2 id="框架简介"><a href="#框架简介" class="headerlink" title="框架简介"></a>框架简介</h2><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>Hexo 是一个快速、简洁且高效的博客框架。 Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="Hugo"><a href="#Hugo" class="headerlink" title="Hugo"></a>Hugo</h3><p>Hugo 是一个快速且现代的静态网站生成器，采用 Go 编程语言开发，Hugo 的设计目标是让创建网站重新变得有趣。</p><p>Hugo 是一个通用的网站框架。从技术上讲，Hugo 是一个<a href="https://www.gohugo.cn/about/benefits/">静态站点生成器</a>。与动态构建页面的系统不同，Hugo 在创建或更新内容时构建页面。由于网站的浏览频率远高于编辑频率，因此 Hugo 旨在为您的网站最终用户提供最佳的浏览体验，并为网站作者提供理想的写作体验。</p><p>使用 Hugo 构建的网站非常快速和安全。Hugo 构建的网站可以托管在任何地方，包括 <a href="https://netlify.com/">Netlify</a>、<a href="https://www.heroku.com/">Heroku</a>、<a href="https://www.godaddy.com/">GoDaddy</a>、<a href="https://www.dreamhost.com/">DreamHost</a>、<a href="https://pages.github.com/">GitHub Pages</a>、<a href="https://about.gitlab.com/features/pages/">GitLab Pages</a>、<a href="https://surge.sh/">Surge</a>、<a href="https://www.aerobatic.com/">Aerobatic</a>、<a href="https://firebase.google.com/docs/hosting/">Firebase</a>、<a href="https://cloud.google.com/storage/">Google Cloud Storage</a>、<a href="https://aws.amazon.com/s3/">Amazon S3</a>、<a href="https://www.rackspace.com/cloud/files">Rackspace</a>、<a href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website">Azure</a>, 和 <a href="https://aws.amazon.com/cloudfront/">CloudFront</a>，并且与 CDN 更配。Hugo 网站在运行时不需要数据库或依赖于诸如 Ruby、Python 或 PHP 等昂贵的运行时环境。</p><p>Hugo 是一个理想的网站创建工具，具有几乎即时的构建时间，能够在网站修改时即刻重建。</p><h3 id="VuePress"><a href="#VuePress" class="headerlink" title="VuePress"></a>VuePress</h3><p>VuePress 由两部分组成：第一部分是一个<a href="https://github.com/vuejs/vuepress/tree/master/packages/@vuepress/core">极简静态网站生成器 (opens new window)</a>，它包含由 Vue 驱动的<a href="https://www.vuepress.cn/theme/">主题系统</a>和<a href="https://www.vuepress.cn/plugin/">插件 API</a>，另一个部分是为书写技术文档而优化的<a href="https://www.vuepress.cn/theme/default-theme-config.html">默认主题</a>，它的诞生初衷是为了支持 Vue 及其子项目的文档需求。</p><p>每一个由 VuePress 生成的页面都带有预渲染好的 HTML，也因此具有非常好的加载性能和搜索引擎优化（SEO）。同时，一旦页面被加载，Vue 将接管这些静态内容，并将其转换成一个完整的单页应用（SPA），其他的页面则会只在用户浏览到的时候才按需加载。</p><p>事实上，一个 VuePress 网站是一个由 <a href="http://vuejs.org/">Vue (opens new window)</a>、<a href="https://github.com/vuejs/vue-router">Vue Router (opens new window)</a>和 <a href="http://webpack.js.org/">webpack (opens new window)</a>驱动的单页应用。如果你以前使用过 Vue 的话，当你在开发一个自定义主题的时候，你会感受到非常熟悉的开发体验，你甚至可以使用 Vue DevTools 去调试你的自定义主题。</p><p>在构建时，我们会为应用创建一个服务端渲染（SSR）的版本，然后通过虚拟访问每一条路径来渲染对应的HTML。这种做法的灵感来源于 <a href="https://nuxtjs.org/">Nuxt (opens new window)</a>的 <code>nuxt generate</code> 命令，以及其他的一些项目，比如 <a href="https://www.gatsbyjs.org/">Gatsby (opens new window)</a>。</p><h3 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a>Jekyll</h3><p>Jekyll 是一个静态网站生成器。用你喜欢的 标记语言书写内容并交给 Jekyll 处理，它将利用模板为你创建一个静态网站。你可以 调整你想要的网址样式、在网站上显示哪些数据 等等。</p><h3 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h3><p>WordPress 于 2003 年发布，时至今日仍是非常受欢迎的开源内容管理平台，用于创建网站、博客网站甚至应用。 事实上，大约 30% 的网页是使用 WordPress 创建的。</p><p>WordPress 为内容创建者和 IT 管理员提供了几大优势。 例如，WordPress 提供了高度的灵活性，无需进行大量的设计或开发工作。 使用和管理也很简单。 重要的是，WordPress 支持多种部署方案，因此您可以根据自己的架构偏好将此平台集成到自己的环境中。</p><h3 id="Typecho"><a href="#Typecho" class="headerlink" title="Typecho"></a>Typecho</h3><p><strong>Typecho</strong>是一个基于<a href="https://zh.wikipedia.org/wiki/PHP">PHP</a>的开源博客程序。它使用多种数据库（<a href="https://zh.wikipedia.org/wiki/MySQL">MySQL</a>、<a href="https://zh.wikipedia.org/wiki/PostgreSQL">PostgreSQL</a>、<a href="https://zh.wikipedia.org/wiki/SQLite">SQLite</a>、<a href="https://zh.wikipedia.org/wiki/MariaDB">MariaDB</a>）储存数据，在<a href="https://zh.wikipedia.org/wiki/GNU%E9%80%9A%E7%94%A8%E5%85%AC%E5%85%B1%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE">GPLv2</a>许可证下发行。</p><h3 id="Halo"><a href="#Halo" class="headerlink" title="Halo"></a>Halo</h3><p>Halo基于Java语言，使用<a href="">spring boot</a>框架开发的博客系统，致力于打造最好的java博客系统，且只想安安静静等做一个博客系统。</p><h3 id="Solo"><a href="#Solo" class="headerlink" title="Solo"></a>Solo</h3><p>solo基于Java有后台的，小而美的博客系统，专为程序员设计。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo忽略一些无需编译的文件</title>
      <link href="/posts/a680fc83/"/>
      <url>/posts/a680fc83/</url>
      
        <content type="html"><![CDATA[<p>Hexo中如果需要自定义自己喜欢的主题或者页面，hexo默认编译source目录下的所有文件。</p><p>下面主要分享一个实用的技术点：自定义无需编译的文件</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>修改<code>_config.yml</code>中的一个配置项<code>skip_render</code></p><blockquote><p>Skip_render：跳过指定文件的渲染，可用glob表达式匹配路径</p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跳过单个文件</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">test.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳过所有的html的文件</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">'*.html'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳过某一目录下的所有文件:</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">test/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要跳过某一目录下的所有文件和子目录时：</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">test/**</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳过多个目录，或者多个文件：</span></span><br><span class="line"><span class="attr">skip_render:</span> [<span class="string">'*.html'</span>, <span class="string">demo/**</span>, <span class="string">test/*</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以配置成多行</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test1/*.html</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test2/**</span></span><br></pre></td></tr></tbody></table></figure><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><ol><li>设置<code>skip_render</code>不起作用，执行<code>hexo clean</code>清楚缓存。</li><li>跳过多个目录编译失败，尝试更新<code>hexo</code>，在source同级目录中执行<code>npm update hexo</code></li><li>如果需要查看是否成功跳过编译，可以在编译时加上<code>--debug</code>例如：<code>hexo generate --debug</code>，关注输出<code>Rendering xxxx</code>中的东西。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo建立一个独立HTML页面</title>
      <link href="/posts/233e464c/"/>
      <url>/posts/233e464c/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Hexo作为一个轻量、强大的博客框架，当我们需要发布博文，只需将markdown文件放入<code>blogRoot/source/_posts</code>目录下，再执行<code>hexo g</code>命令时，<code>.md</code>文件便能转化为html文件，但是有时候我们并不想Hexo渲染我们的自己独立的样式，比如放入一些自己的作品和相册等…</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>使用Hexo提供的跳过渲染配置，在Hexo配置文件下<code>_config.yml</code>找到<code>skip_render</code>关键字，在后面添加跳过渲染的页面，比如我们创建的<code>/source/about/index.html</code>，配置文件填写<code>skip_render: about/**</code>，那么就表示<code>/source/about</code>所有文件将跳过渲染，里面的文件将会被直接复制到public文件夹中，此时可以得到一个独立的about页面</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>在文章头部的<code>front-matter</code>里添加配置<code>layout: false</code>来跳过渲染配置，比如我们要使用<code>about</code>页面跳过渲染，创建<code>/source/about/index.md</code>，将这个页面的相关<code>html</code>代码写入<code>.md</code>文件并保存，然后再<code>index.md</code>的头部添加如下设置：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="section">layout: false</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line">{% raw %}</span><br><span class="line">xxxxxxxxxxxxx</span><br><span class="line">xx HTML代码 xx</span><br><span class="line">xxxxxxxxxxxxx</span><br><span class="line">{% endraw %}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Front-matter是<code>.md</code>文件以—分割的区域，用于指定个别文件变量</p><p><code>.md</code>文件中的<code>html</code>代码要用<code>`和`</code>包起来，使其正确编译里面的代码</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo文章锚点</title>
      <link href="/posts/9c47cdff/"/>
      <url>/posts/9c47cdff/</url>
      
        <content type="html"><![CDATA[<h2 id="当前文章锚点跳转"><a href="#当前文章锚点跳转" class="headerlink" title="当前文章锚点跳转"></a>当前文章锚点跳转</h2><blockquote><ol><li>使用markdown生成目录</li><li>使用html<code>&lt;span id="jump"&gt;跳转的地方&lt;/span&gt;span&gt;</code>，然后使用<code>[点击跳转](#jump)</code></li></ol></blockquote><h2 id="站内文章链接"><a href="#站内文章链接" class="headerlink" title="站内文章链接"></a>站内文章链接</h2><p>官方有标签插件实现，如下：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post<span class="emphasis">_link官方文档{% post_</span>link 'hexo blog' %}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Tip: 优先使用文章<code>Front-matter</code>中的<code>permalink</code>，如果没有<code>permalink</code>，则使用<strong>文件名字</strong>！</p></blockquote><h2 id="站内其他文章锚点链接"><a href="#站内其他文章锚点链接" class="headerlink" title="站内其他文章锚点链接"></a>站内其他文章锚点链接</h2><p>上面的<code>post_link</code>在链接站内其他文章时很好用，但是不支持站内其他文章的锚点链接。</p><p>官方文档还有一个<code>post_path</code>，用于获取文章路径，结合markdown内置链接方式，即可实现站内其他文章锚点链接</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post<span class="emphasis">_path官方文档[<span class="string">hexo 安装</span>](<span class="link">{% post_path 'hexo blog' %}#安装</span>)</span></span><br></pre></td></tr></tbody></table></figure><p>也可使用<code>html &lt;a&gt;</code>标签实现，如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="{% post_path 'hexo blog' %}#安装"&gt;hexo 安装&lt;/a&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Tip:</p><ol><li>如果文章内有图片，可能出现锚点位置不准确的问题，原因是图片加载好把文字内容撑开</li><li>如果有空格，需要把空格换成连字符-。</li></ol></blockquote><h2 id="站外文章锚点（超链接）"><a href="#站外文章锚点（超链接）" class="headerlink" title="站外文章锚点（超链接）"></a>站外文章锚点（超链接）</h2><p>直接使用全局路径即可，如下：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">hexo 引用文章</span>](<span class="link">https://hexo.io/zh-cn/docs/tag-plugins#%E5%BC%95%E7%94%A8%E6%96%87%E7%AB%A0</span>)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Tip: 要设置anchors</p></blockquote><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">markdown:</span><br><span class="line">  anchors:</span><br><span class="line"><span class="code">    # Minimum level for ID creation. (Ex. h2 to h6)</span></span><br><span class="line"><span class="code">    level: 2</span></span><br><span class="line"><span class="code">    # A suffix that is prepended to the number given if the ID is repeated.</span></span><br><span class="line"><span class="code">    collisionSuffix: ''</span></span><br><span class="line"><span class="code">    # If `true`, creates an anchor tag with a permalink besides the heading.</span></span><br><span class="line"><span class="code">    permalink: true</span></span><br><span class="line"><span class="code">    # Class used for the permalink anchor tag.</span></span><br><span class="line"><span class="code">    permalinkClass: header-anchor</span></span><br><span class="line"><span class="code">    # Set to 'right' to add permalink after heading</span></span><br><span class="line"><span class="code">    permalinkSide: 'right'</span></span><br><span class="line"><span class="code">    # The symbol used to make the permalink</span></span><br><span class="line"><span class="code">    permalinkSymbol: ⁍</span></span><br><span class="line"><span class="code">    # Transform anchor to (1) lower case; (2) upper case</span></span><br><span class="line"><span class="code">    case: 1</span></span><br><span class="line"><span class="code">    # Replace space with a character</span></span><br><span class="line"><span class="code">    separator: '-'</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法补充</title>
      <link href="/posts/df4516cb/"/>
      <url>/posts/df4516cb/</url>
      
        <content type="html"><![CDATA[<p>在hexo中使用markdown是简单、容易的，markdown语法的简洁可以让我们得到一个干净简洁的版面，但简单</p><p>的同时也意味着某些功能的缺失，比如插入音频和视频，实现文字居中等，好在Hexo框架中等博客是将markdown文件先渲染为html文件，所以在markdown文件中写入html语法也能被Hexo正常显示渲染，以下为个人在写博客中有用到的一些html标签，方便站内查找</p><h2 id="字体字号和颜色"><a href="#字体字号和颜色" class="headerlink" title="字体字号和颜色"></a>字体字号和颜色</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span>我是黑体字<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"微软雅黑"</span>&gt;</span>我是微软雅黑<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"STCAIYUN"</span>&gt;</span>我是华文彩云<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#0099ff</span> <span class="attr">size</span>=<span class="string">6</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span>color=#0099ff size=6 face="黑体"<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#00ffff</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span>color=#00ffff<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">gray</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span>color=gray<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>效果如下：</p><p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="#0099ff" size="6" face="黑体">color=#0099ff size=6 face=”黑体”</font><br><font color="#00ffff" size="6">color=#00ffff</font><br><font color="gray" size="6">color=gray</font></p><blockquote><p>Size:规定了文本尺寸大小，范围1～7，默认为3。颜色为十六进制RGB</p></blockquote><h2 id="图片居中及改变大小"><a href="#图片居中及改变大小" class="headerlink" title="图片居中及改变大小"></a>图片居中及改变大小</h2><p>居中：<code>&lt;div alighn=center&gt;</code></p><p>改变图片大小：<code>&lt;img src="图片路径" width="300" height="200" alt="图片" &gt;</code></p><blockquote><p>改变图片大小可能导致图片变形</p></blockquote><h2 id="代办事宜"><a href="#代办事宜" class="headerlink" title="代办事宜"></a>代办事宜</h2><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> [x] 男</span><br><span class="line"><span class="bullet">*</span> [ ] 女</span><br></pre></td></tr></tbody></table></figure><p>显示效果：</p><ul><li><input checked="" disabled="" type="checkbox"> 男</li><li><input disabled="" type="checkbox"> 女</li></ul><h2 id="页面内跳转"><a href="#页面内跳转" class="headerlink" title="页面内跳转"></a>页面内跳转</h2><p>使用heml代码实现。</p><p>在要跳转位置定义一个锚点<code>&lt;span id="jump"&gt;target&lt;/span&gt;</code></p><p>使用<code>[target](#jump)</code>将<code>target</code>设置为一点击就跳转到锚点所在位置</p><p><a href="#jump">target</a></p><p><span id="jump">target</span></p><h2 id="行内缩进"><a href="#行内缩进" class="headerlink" title="行内缩进"></a>行内缩进</h2><p>半方大的空白<code>&amp;ensp</code>或<code>&amp;#8194</code></p><p>全方大的空白<code>&amp;emsp</code>或<code>&amp;#8195</code></p><p>不断行的空白<code>&amp;nbsp</code>或<code>&amp;#160</code></p><p>间距如下：</p><p> AAA</p><p> AAA</p><p>&nbsp;AAA</p><h2 id="视频嵌套"><a href="#视频嵌套" class="headerlink" title="视频嵌套"></a>视频嵌套</h2><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">controls</span>=<span class="string">""</span> <span class="attr">preload</span>=<span class="string">"none"</span> <span class="attr">poster</span>=<span class="string">"http://om2bks7xs.bkt.clouddn.com/2017-08-26-Markdown-Advance-Video.jpg"</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">source</span> <span class="attr">id</span>=<span class="string">"mp4"</span> <span class="attr">src</span>=<span class="string">"http://om2bks7xs.bkt.clouddn.com/2017-08-26-Markdown-Advance-Video.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><video id="video" controls="" preload="none" poster="http://om2bks7xs.bkt.clouddn.com/2017-08-26-Markdown-Advance-Video.jpg">  <source id="mp4" src="http://om2bks7xs.bkt.clouddn.com/2017-08-26-Markdown-Advance-Video.mp4" type="video/mp4"></video><h2 id="音频嵌套"><a href="#音频嵌套" class="headerlink" title="音频嵌套"></a>音频嵌套</h2><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">"audio"</span> <span class="attr">controls</span>=<span class="string">""</span> <span class="attr">preload</span>=<span class="string">"none"</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">source</span> <span class="attr">id</span>=<span class="string">"mp3"</span> <span class="attr">src</span>=<span class="string">"http://oht4nlntk.bkt.clouddn.com/Music_iP%E8%B5%B5%E9%9C%B2%20-%20%E7%A6%BB%E6%AD%8C%20%28Live%29.mp3"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><audio id="audio" controls="" preload="none">  <source id="mp3" src="http://oht4nlntk.bkt.clouddn.com/Music_iP%E8%B5%B5%E9%9C%B2%20-%20%E7%A6%BB%E6%AD%8C%20%28Live%29.mp3"></audio><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上markdown结合html的语法不常用，在有需求时在查阅即可</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly添加全局吸底Aplayer</title>
      <link href="/posts/c9e95d91/"/>
      <url>/posts/c9e95d91/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要使用 aplayer，需要安裝 <a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a> 。这款插件通过 Hexo 独有的标签外挂，可以很方便的写入一些参数，插件就会帮我们生成对应的 html。如果你只是使用一些简单的功能，其实无需使用到这个插件，只需以 html 格式书写就行，不用插件去转换。</p><p>例如：</p><p>如果使用插件，在 markdown 中这样写：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% meting "000PeZCQ1i4XVs" "tencent" "artist" "theme:#3F51B5" "mutex:true" "preload:auto" %}</span><br></pre></td></tr></tbody></table></figure><p>其会被插件渲染为:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"aplayer-uxAIfEUs"</span> <span class="attr">class</span>=<span class="string">"aplayer aplayer-tag-marker meting-tag-marker"</span> <span class="attr">data-id</span>=<span class="string">"000PeZCQ1i4XVs"</span> <span class="attr">data-server</span>=<span class="string">"tencent"</span> <span class="attr">data-type</span>=<span class="string">"artist"</span> <span class="attr">data-mode</span>=<span class="string">"circulation"</span> <span class="attr">data-autoplay</span>=<span class="string">"false"</span> <span class="attr">data-mutex</span>=<span class="string">"true"</span> <span class="attr">data-listmaxheight</span>=<span class="string">"340px"</span> <span class="attr">data-preload</span>=<span class="string">"auto"</span> <span class="attr">data-theme</span>=<span class="string">"#3F51B5"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如果不想使用插件，就需要在markdown中用html的格式书写，同时把主题配置文件中的<code>aplayer Inject</code>开启</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aplayer"</span> <span class="attr">data-id</span>=<span class="string">"000PeZCQ1i4XVs"</span> <span class="attr">data-server</span>=<span class="string">"tencent"</span> <span class="attr">data-type</span>=<span class="string">"artist"</span> <span class="attr">data-mutex</span>=<span class="string">"true"</span> <span class="attr">data-preload</span>=<span class="string">"auto"</span> <span class="attr">data-theme</span>=<span class="string">"#3F51B5"</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>回到正题，如何在Butterfly上使用全局吸底 Aplayer</p><h2 id="关闭asset-inject"><a href="#关闭asset-inject" class="headerlink" title="关闭asset_inject"></a>关闭<code>asset_inject</code></h2><blockquote><p>此步骤适用于安装了<code>hexo-tag-aplayer</code>插件的人</p></blockquote><p>由于需要全局都插入 aplayer 和 meting 资源，为了防止插入重复的资源，需要把 <code>asset_inject</code>设为 false</p><p>在 Hexo 的配置文件中</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><h2 id="插入-Aplayer-html"><a href="#插入-Aplayer-html" class="headerlink" title="插入 Aplayer html"></a>插入 Aplayer html</h2><p>为了适配 hexo-tag-aplayer，主题内置的 Meting js 仍为 1.2 版本，并非最新的 2.x 版本。</p><p>Aplayer html 例子：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aplayer no-destroy"</span> <span class="attr">data-id</span>=<span class="string">"60198"</span> <span class="attr">data-server</span>=<span class="string">"netease"</span> <span class="attr">data-type</span>=<span class="string">"playlist"</span> <span class="attr">data-fixed</span>=<span class="string">"true"</span> <span class="attr">data-autoplay</span>=<span class="string">"true"</span>&gt;</span></span> <span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>参数解释：</p><table><thead><tr><th>option</th><th>default</th><th>description</th></tr></thead><tbody><tr><td>data-id</td><td>require</td><td>song id / playlist id / album id / search keyword</td></tr><tr><td>data-server</td><td>require</td><td>music platform: netease, tencent, kugou, xiami, baidu</td></tr><tr><td>data-type</td><td>require</td><td>song, playlist, album, search, artist</td></tr><tr><td>data-fixed</td><td>false</td><td>enable fixed mode</td></tr><tr><td>data-mini</td><td>false</td><td>enable mini mode</td></tr><tr><td>data-autoplay</td><td>false</td><td>audio autoplay</td></tr><tr><td>data-theme</td><td>#2980b9</td><td>main color</td></tr><tr><td>data-loop</td><td>all</td><td>player loop play, values: ‘all’, ‘one’, ‘none’</td></tr><tr><td>data-order</td><td>list</td><td>player play order, values: ‘list’, ‘random’</td></tr><tr><td>data-preload</td><td>auto</td><td>values: ‘none’, ‘metadata’, ‘auto’</td></tr><tr><td>data-volume</td><td>0.7</td><td>default volume, notice that player will remember user setting, default volume will not work after user set volume themselves</td></tr><tr><td>data-mutex</td><td>true</td><td>prevent to play multiple player at the same time, pause other players when this player start play</td></tr><tr><td>data-lrctype</td><td>0</td><td>lyric type</td></tr><tr><td>data-listfolded</td><td>false</td><td>indicate whether list should folded at first</td></tr><tr><td>data-listmaxheight</td><td>340px</td><td>list max height</td></tr><tr><td>data-storagename</td><td>metingjs</td><td>localStorage key that store player setting</td></tr></tbody></table><blockquote><p>require 代表着这些参数是必须要使用的，其它的参数则可以根据自己需要配置。</p><p>配置全局吸底，data-fixed 和 data-mini 也必须配置，配置为 true</p><p>如果使用 Pjax，则在 class 裏需添加 no-destroy，这样防止切换页面时 Aplayer 被销毁</p></blockquote><p>把 aplayer代碼 插入到主題配置文件的 inject.bottom 去</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class="aplayer</span> <span class="literal">no</span><span class="string">-destroy"</span> <span class="string">data-id="60198"</span> <span class="string">data-server="netease"</span> <span class="string">data-type="playlist"</span> <span class="string">data-fixed="true"</span> <span class="string">data-autoplay="true"&gt;</span> <span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>运行 Hexo 就可以看到网页左下角出现了 Aplayer</p><p>最后，如果你想切换页面时，音乐不会中断。请把主题配置文件的 pjax 设为 true</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> butterfly </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo完美支持数学公式</title>
      <link href="/posts/c14cd9b1/"/>
      <url>/posts/c14cd9b1/</url>
      
        <content type="html"><![CDATA[<p>按照网上的攻略尝试了几种方法，卸载了Hexo默认渲染插件<code>hexo-renderer-marked</code></p><p>更换了markdown渲染器依旧不能完美显示数学公式</p><p>最终是通过一个大佬的博客，他使用的主题是 NexT 8.10使用了 <a href="https://pandoc.org/installing.html">pandoc</a> 来显示数学公式，能够完美支持</p><p>按照他的方法，在Butterfly主题下也安装了pandoc渲染插件<code>hexo-renderer-pandoc</code>发现原来不能显示的数学公式能够完美显示了😆</p><h2 id="安装-hexo-renderer-pandoc"><a href="#安装-hexo-renderer-pandoc" class="headerlink" title="安装 hexo-renderer-pandoc"></a>安装 hexo-renderer-pandoc</h2><p>为了使用 pandoc 作为 Hexo 的渲染引擎，我们需要安装插件 hexo-renderer-pandoc，步骤如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载Hexo默认渲染插件：</span></span><br><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装pandoc渲染插件：</span></span><br><span class="line">npm install hexo-renderer-pandoc --save</span><br></pre></td></tr></tbody></table></figure><h2 id="配置使用-mathjax"><a href="#配置使用-mathjax" class="headerlink" title="配置使用 mathjax"></a>配置使用 mathjax</h2><p>在站点 NexT 配置文件 _config.yml 文件中添加如下配置：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Next v6.3.0 后的版本 tags 要设置成 ams</span></span><br><span class="line">    <span class="comment"># Available values: none | ams | all</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">ams</span></span><br></pre></td></tr></tbody></table></figure><h2 id="安装-pandoc-软件包"><a href="#安装-pandoc-软件包" class="headerlink" title="安装 pandoc 软件包"></a>安装 pandoc 软件包</h2><p>从 <a href="https://pandoc.org/installing.html">pandoc</a> 官网下载所需要的软件包，我这里使用的 Windows10 + GitBash 方式，因此我下载了 Windows 安装包， 安装完毕后，记得重新打开 GitBash 命令框 ，不然执行 <strong>Hexo g</strong> 会报错。</p><p>完成后，执行命令，既可以完美显示公式了。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Hexo的Butterfly主题中添加本地搜索功能</title>
      <link href="/posts/2a319798/"/>
      <url>/posts/2a319798/</url>
      
        <content type="html"><![CDATA[<p>在butterfly官网上有三个插件可供选择，分别是Algolia search，Local search， Docsearch</p><p>Algolia search借助第三方网站algolia，需要在algolia注册账号，并需要执行命令把自己网站的信息上传到algolia，每次搜索都需要请求algolia的数据，网络较慢会导致网址打开速度降低</p><p>Local search依靠hexo-generator-search插件是把文章的信息生成一个搜索库放在本地，所以搜索效率很高。</p><p><a href="https://docsearch.algolia.com/?utm_source=artical_gitcode">DocSearch</a> 是一款由 Algolia 公司提供的专业文档搜索引擎，旨在帮助开发者和内容创作者构建强大、精准且用户体验极佳的文档搜索功能。这款开源工具通过集成先进的搜索算法，使用户能够轻松地在大量技术文档中找到所需信息。</p><p>本文仅针对Local search进行配置</p><h2 id="安装hexo-generator-search插件："><a href="#安装hexo-generator-search插件：" class="headerlink" title="安装hexo-generator-search插件："></a>安装hexo-generator-search插件：</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></tbody></table></figure><h2 id="配置插件："><a href="#配置插件：" class="headerlink" title="配置插件："></a>配置插件：</h2><p><del>### 配置_config.yml，添加以下内容</del></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></tbody></table></figure><p><del>其中，path为生成的搜索文件名，field指定搜索的对象（可以是post或page），format指定搜索结果的格式，limit指定最多显示的搜索结果数量。</del></p><h3 id="配置-config-butterfly-yml修改以下内容"><a href="#配置-config-butterfly-yml修改以下内容" class="headerlink" title="配置_config.butterfly.yml修改以下内容"></a>配置_config.butterfly.yml修改以下内容</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br></pre></td></tr></tbody></table></figure><h2 id="生成搜索文件："><a href="#生成搜索文件：" class="headerlink" title="生成搜索文件："></a>生成搜索文件：</h2><p>在Hexo博客目录下，运行以下命令生成搜索文件：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></tbody></table></figure><p>完成以上步骤后，Hexo博客就可以使用站内搜索功能了。在博客中输入关键字进行搜索，并查看搜索结果页面。</p><p>需要注意的是插件官网的配置中有个template配置，无需配置该项。配置了反而无法正常搜索。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> butterfly </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法速查表</title>
      <link href="/posts/923759ea/"/>
      <url>/posts/923759ea/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/iconfinder_markdown_298823.png" alt="img"></p><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 <strong>.md</strong>, <strong>.markdown</strong>。</p><h2 id="Markdown-应用"><a href="#Markdown-应用" class="headerlink" title="Markdown 应用"></a>Markdown 应用</h2><p>Markdown 能被使用来撰写电子书，如：Gitbook。</p><p>当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。</p><h2 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h2><ol><li><p>使用 = 和 - 标记一级和二级标题</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我展示的是一级标题</span><br><span class="line">=================</span><br><span class="line"></span><br><span class="line">我展示的是二级标题</span><br><span class="line">-----------------</span><br></pre></td></tr></tbody></table></figure><p>显示效果如下：</p><h1 id="我展示的是一级标题"><a href="#我展示的是一级标题" class="headerlink" title="我展示的是一级标题"></a>我展示的是一级标题</h1><h2 id="我展示的是二级标题"><a href="#我展示的是二级标题" class="headerlink" title="我展示的是二级标题"></a>我展示的是二级标题</h2></li><li><p>使用 # 号标记</p><p>使用 <strong>#</strong> 号可表示 1-6 级标题，一级标题对应一个 <strong>#</strong> 号，二级标题对应两个 <strong>#</strong> 号，以此类推。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></tbody></table></figure><p>显示效果如下：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></li></ol><h2 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a>Markdown 段落</h2><p>Markdown 段落没有特殊的格式，直接编写文字就好，<strong>段落的换行是使用两个以上空格加上回车</strong>。</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>Markdown 可以使用以下几种字体：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体文本*</span></span><br><span class="line"><span class="emphasis">_斜体文本_</span></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"><span class="strong">__粗体文本__</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*粗斜体文本*</span>**</span></span><br><span class="line"><span class="strong">__<span class="emphasis">_粗斜体文本_</span>__</span></span><br></pre></td></tr></tbody></table></figure><p>显示效果如下所示：</p><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em><br><em><strong>粗斜体文本</strong></em></p><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">***</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">* * *</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span><span class="strong">***</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- - -</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">----------</span></span><br></pre></td></tr></tbody></table></figure><p>显示效果如下所示：</p><hr><hr><hr><hr><hr><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <strong>~~</strong> 即可，实例如下：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUNOOB.COM</span><br><span class="line">GOOGLE.COM</span><br><span class="line">~~BAIDU.COM~~</span><br></pre></td></tr></tbody></table></figure><p>显示效果如下所示：</p><p>RUNOOB.COM<br>GOOGLE.COM</p><p><del>BAIDU.COM</del></p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>下划线可以通过 HTML 的 <strong><u></u></strong><u> 标签来实现：</u></p><u><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>带下划线文本<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>显示效果如下所示：</p><p><u>带下划线文本</u></p><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>脚注是对文本的补充说明。</p><p>Markdown 脚注的格式如下:</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^要注明的文本]</span><br></pre></td></tr></tbody></table></figure><p>以下实例演示了脚注的用法：</p><blockquote><p>创建脚注格式类似这样 [^RUNOOB]。</p><p>[^RUNOOB]: 菜鸟教程 – 学的不仅是技术，更是梦想！！！</p></blockquote><h2 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a>Markdown 列表</h2><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号(<em>****)、加号(<strong>+</strong>)或是减号(</em>*-**)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">*</span> 第二项</span><br><span class="line"><span class="bullet">*</span> 第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"><span class="bullet">+</span> 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第三项</span><br></pre></td></tr></tbody></table></figure><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><p>有序列表使用数字并加上 <strong>.</strong> 号来表示，如：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></tbody></table></figure><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加两个或四个空格即可：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项：</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第二个元素</span><br><span class="line"><span class="bullet">2.</span> 第二项：</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第二个元素</span><br></pre></td></tr></tbody></table></figure><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h2 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h2><p>Markdown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 区块引用</span></span><br><span class="line"><span class="quote">&gt; 菜鸟教程</span></span><br><span class="line"><span class="quote">&gt; 学的不仅是技术更是梦想</span></span><br></pre></td></tr></tbody></table></figure><p>显示结果如下：</p><blockquote><p>区块引用<br>菜鸟教程<br>学的不仅是技术更是梦想</p></blockquote><p>另外区块是可以嵌套的，一个 <strong>&gt;</strong> 符号是最外层，两个 <strong>&gt;</strong> 符号是第一层嵌套，以此类推：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 最外层</span></span><br><span class="line"><span class="quote">&gt; &gt; 第一层嵌套</span></span><br><span class="line"><span class="quote">&gt; &gt; &gt; 第二层嵌套</span></span><br></pre></td></tr></tbody></table></figure><p>显示结果如下：</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><h3 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h3><p>区块中使用列表实例如下：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 区块中使用列表</span></span><br><span class="line"><span class="quote">&gt; 1. 第一项</span></span><br><span class="line"><span class="quote">&gt; 2. 第二项</span></span><br><span class="line"><span class="quote">&gt; + 第一项</span></span><br><span class="line"><span class="quote">&gt; + 第二项</span></span><br><span class="line"><span class="quote">&gt; + 第三项</span></span><br></pre></td></tr></tbody></table></figure><p>显示结果如下：</p><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><h3 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h3><p>如果要在列表项目内放进区块，那么就需要在 <strong>&gt;</strong> 前添加四个空格的缩进。</p><p>列表中使用区块实例如下：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="code">    &gt; 菜鸟教程</span></span><br><span class="line"><span class="code">    &gt; 学的不仅是技术更是梦想</span></span><br><span class="line"><span class="code">* 第二项</span></span><br></pre></td></tr></tbody></table></figure><p>显示结果如下：</p><ul><li>第一项<blockquote><p>菜鸟教程<br>学的不仅是技术更是梦想</p></blockquote></li><li>第二项</li></ul><h2 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h2><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**`**），例如：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`printf()`</span> 函数</span><br></pre></td></tr></tbody></table></figure><p>显示结果如下：</p><p><code>printf()</code> 函数</p><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>代码区块使用 <strong>4 个空格</strong>或者一个<strong>制表符（Tab 键）</strong>。</p><p>实例如下：</p><p>​&lt;?php<br>​echo ‘RUNOOB’<br>​function test ( ) {<br>​   echo  ‘ test ‘ ;<br>​}</p><pre><code>&lt;?phpecho 'RUNOOB'function test(){  echo 'test';}</code></pre><p>你也可以用 <strong>```</strong> 包裹一段代码，并指定一种语言（也可以不指定）：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">$(document).ready(function () {</span></span><br><span class="line"><span class="code">    alert('RUNOOB');</span></span><br><span class="line"><span class="code">});</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></tbody></table></figure><p>显示结果如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">'RUNOOB'</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h2><p>链接使用方法如下：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">链接名称</span>](<span class="link">链接地址</span>)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></tbody></table></figure><p>例如：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [<span class="string">菜鸟教程</span>](<span class="link">https://www.runoob.com</span>)</span><br></pre></td></tr></tbody></table></figure><p>显示结果如下：</p><p>这是一个链接 <a href="https://www.runoob.com/">菜鸟教程</a></p><p>直接使用链接地址：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&lt;https://www.runoob.com&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>显示结果如下：</p><p><a href="https://www.runoob.com/">https://www.runoob.com</a></p><h3 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h3><p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [<span class="string">Google</span>][<span class="symbol">1</span>]</span><br><span class="line">这个链接用 runoob 作为网址变量 [<span class="string">Runoob</span>][<span class="symbol">runoob</span>]</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">  [1]: http://www.google.com/</span><br><span class="line">  [runoob]: http://www.runoob.com/</span><br></pre></td></tr></tbody></table></figure><p>显示结果如下：</p><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p><h2 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h2><p>Markdown 图片语法格式如下：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">图片地址</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">图片地址 "可选标题"</span>)</span><br></pre></td></tr></tbody></table></figure><ul><li>开头一个感叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li></ul><p>使用实例：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">RUNOOB 图标</span>](<span class="link">https://static.jyshare.com/images/runoob-logo.png</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">RUNOOB 图标</span>](<span class="link">https://static.jyshare.com/images/runoob-logo.png "RUNOOB"</span>)</span><br></pre></td></tr></tbody></table></figure><p>显示结果如下：</p><p><img src="https://static.jyshare.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><img src="https://static.jyshare.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p><p>当然，你也可以像网址那样对图片网址使用变量:</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [<span class="string">RUNOOB</span>][<span class="symbol">1</span>].</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">https://static.jyshare.com/images/runoob-logo.png</span></span><br></pre></td></tr></tbody></table></figure><p>显示结果如下：</p><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">RUNOOB</a>.<br>然后在文档的结尾为变量赋值（网址）</p><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://static.jyshare.com/images/runoob-logo.png"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>显示结果如下：</p><img src="https://static.jyshare.com/images/runoob-logo.png" width="50%"><h2 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h2><p>Markdown 制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p><p>语法格式如下：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></tbody></table></figure><p>以上代码显示结果如下：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><p>对齐方式</p><p><strong>我们可以设置表格的对齐方式：</strong></p><ul><li><strong>-:</strong> 设置内容和标题栏居右对齐。</li><li><strong>:-</strong> 设置内容和标题栏居左对齐。</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li></ul><p>实例如下：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></tbody></table></figure><p>以上代码显示结果如下：</p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h2 id="Markdown-高级技巧"><a href="#Markdown-高级技巧" class="headerlink" title="Markdown 高级技巧"></a>Markdown 高级技巧</h2><h3 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h3><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 <span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Alt<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Del<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> 重启电脑</span><br></pre></td></tr></tbody></table></figure><p>输出结果为：</p><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**文本加粗**</span> </span><br><span class="line">\<span class="emphasis">*\*</span> 正常显示星号 \<span class="emphasis">*\*</span></span><br></pre></td></tr></tbody></table></figure><p>输出结果为：</p><p><strong>文本加粗</strong><br>** 正常显示星号 **</p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">{}  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></tbody></table></figure><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p><strong>Markdown Preview Enhanced</strong> 使用 <a href="https://github.com/Khan/KaTeX">KaTeX</a> 或者 <a href="https://github.com/mathjax/MathJax">MathJax</a> 来渲染数学表达式。</p><p>KaTeX 拥有比 MathJax 更快的性能，但是它却少了很多 MathJax 拥有的特性。你可以查看 KaTeX supported functions/symbols 来了解 KaTeX 支持那些符号和函数。</p><p>默认下的分隔符：</p><ul><li><code>$...$</code> 或者 <code>\(...\)</code> 中的数学表达式将会在行内显示。</li><li><code>$$...$$</code> 或者 <code>\[...\]</code> 或者 ````math` 中的数学表达式将会在块内显示。</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/0e408954-fda8-11e5-9eb4-562d7c0ca431.gif" alt="0e408954-fda8-11e5-9eb4-562d7c0ca431"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin{Bmatrix}</span><br><span class="line">   a &amp; b \\</span><br><span class="line">   c &amp; d</span><br><span class="line">\end{Bmatrix}</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">\begin{CD}</span><br><span class="line">   A @&gt;a&gt;&gt; B \\</span><br><span class="line">@VbVV @AAcA \\</span><br><span class="line">   C @= D</span><br><span class="line">\end{CD}</span><br><span class="line">$$</span><br></pre></td></tr></tbody></table></figure><p>输出结果如下：<br>$$<br>\begin{Bmatrix}<br>   a &amp; b \<br>   c &amp; d<br>\end{Bmatrix}<br>$$<br>$$<br>\begin{CD}<br>   A @&gt;a&gt;&gt; B \<br>@VbVV @AAcA \<br>   C @= D<br>\end{CD}<br>$$</p></u>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo更换Markdown渲染器</title>
      <link href="/posts/5fc4ef39/"/>
      <url>/posts/5fc4ef39/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在写博客时，往往会设计一些数学公式，当你需要使用LaTeX语法时，由于Hexo默认的markdown渲染器（<code>hexo-renderer-marked</code>）不支持复杂公式，导致渲染失败，这时候就需要更换markdown渲染器。</p><h2 id="卸载markdown渲染器"><a href="#卸载markdown渲染器" class="headerlink" title="卸载markdown渲染器"></a>卸载markdown渲染器</h2><p>卸载默认的markdown渲染器</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br></pre></td></tr></tbody></table></figure><h1 id="推荐的markdown渲染器"><a href="#推荐的markdown渲染器" class="headerlink" title="推荐的markdown渲染器"></a>推荐的markdown渲染器</h1><p>下面推荐几种常见的markdown渲染器，你可以在Hexo插件中找到它们</p><p>你也可以在 <a href="https://www.npmjs.com/search?q=hexo-renderer-markdown">这里</a> 查看更多的版本。</p><ul><li><p><strong><a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a></strong></p><blockquote><p>Hexo默认的markdown渲染器，不支持mathjax，不支持插件扩展，不支持emoji表情</p></blockquote></li></ul><p>项目地址：<a href="https://github.com/hexojs/hexo-renderer-marked">https://github.com/hexojs/hexo-renderer-marked</a></p><p>安装命令：<code>npm install hexo-renderer-marked --save</code></p><ul><li><p><strong><a href="https://github.com/sun11/hexo-renderer-kramed">hexo-renderer-kramed</a></strong></p><blockquote><p>基于hexo-renderer-marked，支持Mathjax，不支持插件的扩展，不支持emoji的表情</p></blockquote></li></ul><p>项目地址：<a href="https://github.com/sun11/hexo-renderer-kramed">https://github.com/sun11/hexo-renderer-kramed</a></p><p>安装命令：<code>npm install hexo-renderer-kramed --save</code></p><ul><li><p><strong><a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a></strong></p><blockquote><p>渲染速度比hexo-renderer-marked快，支持脚注（上标，下标，下滑线），支持emoji表情，支持LaTeX，扩展需要另外通过npm安装</p></blockquote></li></ul><p>项目地址：<a href="https://github.com/hexojs/hexo-renderer-markdown-it">https://github.com/hexojs/hexo-renderer-markdown-it</a></p><p>安装命令：<code>npm i hexo-renderer-markdown-it --save</code></p><ul><li><p><strong><a href="https://github.com/CHENXCHEN/hexo-renderer-markdown-it-plus">hexo-renderer-markdown-it-plus</a></strong></p><blockquote><p>在hexo-renderer-markdown-it的基础上默认自带许多插件，可以直接使用</p></blockquote></li></ul><p>项目地址：<a href="https://github.com/CHENXCHEN/hexo-renderer-markdown-it-plus">https://github.com/CHENXCHEN/hexo-renderer-markdown-it-plus</a></p><p>安装命令：<code>npm i hexo-renderer-markdown-it-plus --save</code></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上插件选择合适的即可，一股脑的安装只会导越来越臃肿。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题-一图流及顶部图修改</title>
      <link href="/posts/fc6d92ff/"/>
      <url>/posts/fc6d92ff/</url>
      
        <content type="html"><![CDATA[<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>修改 <a href="https://butterfly.js.org/">Butterfly</a> 的配置文件 <code>_config.butterfly.yml</code>。</p><p>编辑 <code>index_img</code>、<code>index_top_img_height</code>、<code>background</code>、<code>footer_bg</code>、<code>mask.header</code> 选项。<br>设置网站背景，将主页顶部图和页脚背景改为透明，调整主页顶部图高度，移除顶部图的黑色半透遮罩。<br><em>(需要将示例地址替换为自己的图片地址。)</em></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Image (圖片設置)</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of home page</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">transparent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Beautify/Effect (美化/效果)</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The height of top_img, eg: 300px/300em/300rem (主頁top_img高度)</span></span><br><span class="line"><span class="attr">index_top_img_height:</span> <span class="string">400px</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Website Background (設置網站背景)</span></span><br><span class="line"><span class="comment"># can set it to color or image (可設置圖片 或者 顔色)</span></span><br><span class="line"><span class="comment"># The formal of image: url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">url(https://example.com/img/background.jpg)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Footer Background</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="string">transparent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add mask to header or footer (为 header 或 footer 添加黑色半透遮罩)</span></span><br><span class="line"><span class="attr">mask:</span></span><br><span class="line">  <span class="attr">header:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><h2 id="引入相关样式"><a href="#引入相关样式" class="headerlink" title="引入相关样式"></a>引入相关样式</h2><p>新建一个文件，位于 <code>source/css/modify.styl</code>，并增加以下内容。<br><em>(此处只是举例，也可以使用已有的样式文件。)</em></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">@import</span> <span class="string">'nib'</span></span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">顶部图</span></span><br><span class="line"><span class="comment">#page-header</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">transparent</span> <span class="type">!important</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&amp;.post-bg,</span> <span class="string">&amp;.not-home-page</span></span><br><span class="line">    <span class="attr">height:</span> <span class="string">280px</span> <span class="type">!important</span></span><br><span class="line">  <span class="comment">#post-info</span></span><br><span class="line">    <span class="attr">bottom:</span> <span class="string">40px</span> <span class="type">!important</span></span><br><span class="line">    <span class="attr">text-align:</span> <span class="string">center</span></span><br><span class="line">  <span class="comment">#page-site-info</span></span><br><span class="line">    <span class="attr">top:</span> <span class="string">140px</span> <span class="type">!important</span></span><br><span class="line"></span><br><span class="line">  <span class="string">@media</span> <span class="attr">screen and (max-width:</span> <span class="string">768px)</span></span><br><span class="line">    <span class="string">&amp;.not-home-page</span></span><br><span class="line">      <span class="attr">height:</span> <span class="string">200px</span> <span class="type">!important</span></span><br><span class="line">    <span class="comment">#post-info</span></span><br><span class="line">      <span class="attr">bottom:</span> <span class="string">10px</span> <span class="type">!important</span></span><br><span class="line">    <span class="comment">#page-site-info</span></span><br><span class="line">      <span class="attr">top:</span> <span class="string">100px</span> <span class="type">!important</span></span><br><span class="line"></span><br><span class="line"><span class="string">.top-img</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">250px</span></span><br><span class="line">  <span class="attr">margin:</span> <span class="string">-50px</span> <span class="string">-40px</span> <span class="string">50px</span></span><br><span class="line">  <span class="attr">border-top-left-radius:</span> <span class="string">inherit</span></span><br><span class="line">  <span class="attr">border-top-right-radius:</span> <span class="string">inherit</span></span><br><span class="line">  <span class="attr">background-position:</span> <span class="string">center</span> <span class="string">center</span></span><br><span class="line">  <span class="attr">background-size:</span> <span class="string">cover</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="string">all</span> <span class="number">0.</span><span class="string">3s</span></span><br><span class="line"></span><br><span class="line">  <span class="string">@media</span> <span class="attr">screen and (max-width:</span> <span class="string">768px)</span></span><br><span class="line">    <span class="attr">height:</span> <span class="string">230px</span></span><br><span class="line">    <span class="attr">margin:</span> <span class="string">-36px</span> <span class="string">-14px</span> <span class="string">36px</span></span><br><span class="line"></span><br><span class="line">  [<span class="string">data-theme='dark'</span>] <span class="string">&amp;</span></span><br><span class="line">    <span class="attr">filter:</span> <span class="string">brightness(0.8)</span></span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">页脚</span></span><br><span class="line"><span class="comment">#footer:before</span></span><br><span class="line">  <span class="attr">background-color:</span> <span class="string">alpha(#FFF,</span> <span class="number">.5</span><span class="string">)</span></span><br><span class="line"></span><br><span class="line">  [<span class="string">data-theme='dark'</span>] <span class="string">&amp;</span></span><br><span class="line">    <span class="attr">background-color:</span> <span class="string">alpha(#000,</span> <span class="number">.5</span><span class="string">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#footer-wrap, #footer-wrap a</span></span><br><span class="line">  <span class="attr">color:</span> <span class="comment">#111</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="string">unset</span></span><br><span class="line"></span><br><span class="line">  [<span class="string">data-theme='dark'</span>] <span class="string">&amp;</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">var(--light-grey)</span></span><br></pre></td></tr></tbody></table></figure><p>修改 <a href="https://butterfly.js.org/">Butterfly</a> 的配置文件 <code>_config.butterfly.yml</code>，在 <code>inject.head</code> 选项引入样式。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># other (其他)</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before '&lt;/head&gt;' tag) and the bottom (before '&lt;/body&gt;' tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel="stylesheet"</span> <span class="string">href="/css/modify.css"&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>Hexo 会将 Stylus 渲染成 CSS 文件，所以此处应为 <code>modify.css</code>。</p><h2 id="增加插件脚本"><a href="#增加插件脚本" class="headerlink" title="增加插件脚本"></a>增加插件脚本</h2><p>因为使用了 <code>cheerio</code> 来解析 HTML，所以需要先安装此依赖。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cheerio</span><br></pre></td></tr></tbody></table></figure><p>新建一个文件，位于 <code>scripts/modify.js</code>，并增加以下内容。<br><em>(此处只是举例，也可以使用已有的插件脚本文件。)</em></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">const</span> { filter } = hexo.<span class="property">extend</span>;</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在页面插入新顶部图</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">cheerio.Root</span>} $ Root</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insertTopImg</span>(<span class="params">$</span>) {</span><br><span class="line">    <span class="keyword">const</span> header = $(<span class="string">'#page-header'</span>);</span><br><span class="line">    <span class="keyword">if</span> (header.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">const</span> background = header.<span class="title function_">css</span>(<span class="string">'background-image'</span>);</span><br><span class="line">    <span class="keyword">if</span> (!background) <span class="keyword">return</span>;</span><br><span class="line">    $(<span class="string">'#post, #page, #archive, #tag, #category'</span>).<span class="title function_">prepend</span>(<span class="string">`&lt;div class="top-img" style="background-image: <span class="subst">${background}</span>;"&gt;&lt;/div&gt;`</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 HTML</span></span><br><span class="line">filter.<span class="title function_">register</span>(<span class="string">'after_render:html'</span>, <span class="function">(<span class="params">str, data</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(str, {</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">    });</span><br><span class="line">    <span class="title function_">insertTopImg</span>($);</span><br><span class="line">    <span class="keyword">return</span> $.<span class="title function_">html</span>();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><p>👏 恭喜你完成了修改，可以使用以下命令进行预览。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></tbody></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>其实早些时候，有篇最终效果类似的修改教程。<br>是<a href="https://www.imcharon.com/">@Nesxc</a> 大佬写的「<a href="https://www.imcharon.com/60/">butterfly文章页美化教程</a>」。<br>他是通过修改主题源文件的方式实现的。<br>本篇是采用 Hexo 的 <a href="https://hexo.io/zh-cn/docs/plugins">插件</a> 系统实现的。</p><p>插件版的优点是更新主题时，只要结构变化不大，无需任何操作即可继续使用。并且在管理上也方便。<br>源文件版的优点是效率会略高一点，毕竟是直接修改的主题源文件。</p><p>如果不想每次升级主题都可能要重新改一遍，或是为了方便管理，则可以选择插件版。<br>如果本来就修改了源文件，也不介意再多修改这一个，则可以选择源文件版</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> butterfly </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Front-Matter介绍</title>
      <link href="/posts/631c6c3a/"/>
      <url>/posts/631c6c3a/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Front-matter是markdown上以—分割的区域，用于制定当前文章的参数</p><ul><li><p>page front-matter：用于单独页面配置</p></li><li><p>post front-matter：用于文章页配置</p></li></ul><h1 id="Hexo-Page-Front-matter详解"><a href="#Hexo-Page-Front-matter详解" class="headerlink" title="Hexo Page Front-matter详解"></a>Hexo Page Front-matter详解</h1><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>配置默认参数选项</th><th>默认值</th><th>配置选项参数说明</th></tr></thead><tbody><tr><td>title</td><td></td><td>必需，标题</td></tr><tr><td>date</td><td></td><td>必需，日期</td></tr><tr><td>type</td><td></td><td>必需，标签，分类，友情链接需配置</td></tr><tr><td>updated</td><td></td><td>可选，页面更新日期</td></tr><tr><td>description</td><td></td><td>可选，页面描述</td></tr><tr><td>keywords</td><td></td><td>可选，页面关键字</td></tr><tr><td>comments</td><td>true</td><td>可选，评论模块</td></tr><tr><td>top_img</td><td>false</td><td>可选，顶部图</td></tr><tr><td>mathjax</td><td>false</td><td>可选，mathjax模块</td></tr><tr><td>katex</td><td>false</td><td>可选，katex模块</td></tr><tr><td>aside</td><td>true</td><td>可选，侧边栏</td></tr><tr><td>aplayer</td><td></td><td>可选，在需要的页面加载aplayer的js和css</td></tr><tr><td>highlight_shrink</td><td></td><td>可选，代码框是否展开</td></tr></tbody></table><blockquote><p>front-matter选项中所有内容均为非必填。建议至少填写title和date值</p></blockquote><h1 id="Hexo-Post-Front-matter详解"><a href="#Hexo-Post-Front-matter详解" class="headerlink" title="Hexo Post Front-matter详解"></a>Hexo Post Front-matter详解</h1><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">toc<span class="emphasis">_style_</span>simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright<span class="emphasis">_author:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href:</span></span><br><span class="line"><span class="emphasis">copyright_</span>url:</span><br><span class="line">copyright<span class="emphasis">_info:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line"><span class="section">aside:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>配置选项参数名称</th><th>默认值</th><th>配置选项参数说明</th></tr></thead><tbody><tr><td>title</td><td>markdown文件标题</td><td>必需，文章标题，强烈建议填写</td></tr><tr><td>date</td><td>文件创建日期</td><td>必需，文章创建日期，强烈建议填写</td></tr><tr><td>updated</td><td>文件更新日期</td><td>可选，文章更新日期</td></tr><tr><td>tags</td><td>无</td><td>可选，文章标签，可多个标签</td></tr><tr><td>categories</td><td>无</td><td>可选，文章分类，建议一篇文章仅一个分类</td></tr><tr><td>keywords</td><td>文章关键字</td><td>可选，文章关键字，SEO需要</td></tr><tr><td>description</td><td>文章描述</td><td>可选，文章描述</td></tr><tr><td>top_img</td><td>无</td><td>可选，文章顶部图片，推荐使用图床</td></tr><tr><td>cover</td><td>false</td><td>可选，文章缩略图（可设置为false，图片地址，留空）</td></tr><tr><td>comments</td><td>true</td><td>可选，显示文章评论</td></tr><tr><td>toc</td><td>toc的enable配置</td><td>可选，显示文章toc</td></tr><tr><td>toc_number</td><td>toc的number配置</td><td>可选，显示toc_number</td></tr><tr><td>toc_style_simple</td><td></td><td>可选，toc简介模式</td></tr><tr><td>copyright</td><td>true</td><td>可选，显示文章版权模块</td></tr><tr><td>copyright_anthor</td><td></td><td>可选，文章版权模块的文章作者</td></tr><tr><td>copyright_anthor_href</td><td></td><td>可选，文章版权模块的作者连接链接</td></tr><tr><td>copyright_url</td><td></td><td>可选，文章版权模块的文章连接链接</td></tr><tr><td>copyright_info</td><td></td><td>可选，文章版权模块版权声明文字</td></tr><tr><td>mathjax</td><td>false</td><td>可选，显示mathjax</td></tr><tr><td>katex</td><td>false</td><td>可选，显示katex</td></tr><tr><td>aplayer</td><td>无</td><td>可选，加载aplayer的js和css</td></tr><tr><td>highlight_shrink</td><td></td><td>可选，配置代码框是否展开</td></tr><tr><td>aside</td><td>true</td><td>可选，显示侧边栏</td></tr></tbody></table><blockquote><p>front-matter选项中所有内容均为非必填。建议至少填写title和date值</p></blockquote><p>注意；</p><blockquote><p>如果top_img不填写，文章特色图片会根据文章标题的hashcode值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图各有特色</p><p>date值尽量保证每篇文章是唯一的，因为某些主题中Gitalk和Gitment识别id是通过date的值来作为唯一标识的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo常用命令</title>
      <link href="/posts/33f59116/"/>
      <url>/posts/33f59116/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo常用命令列表"><a href="#hexo常用命令列表" class="headerlink" title="hexo常用命令列表"></a>hexo常用命令列表</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hexo init                   <span class="comment"># 初始化一个本地文件夹为网站的根目录</span></span><br><span class="line">hexo new <span class="string">"postName"</span>         <span class="comment"># 新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span>    <span class="comment"># 新建页面</span></span><br><span class="line">hexo generate               <span class="comment"># 生成静态页面至public目录</span></span><br><span class="line">hexo server                 <span class="comment"># 开启预览访问端口（默认端口4000，'Ctrl + C'关闭server）</span></span><br><span class="line">hexo deploy                 <span class="comment"># 部署到GitHub或Gitee服务器上</span></span><br><span class="line">hexo clean                  <span class="comment"># 清理缓存文件</span></span><br><span class="line">hexo <span class="built_in">help</span>                   <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version                <span class="comment"># 查看Hexo的版本</span></span><br></pre></td></tr></tbody></table></figure><h1 id="Hexo常用命令说明"><a href="#Hexo常用命令说明" class="headerlink" title="Hexo常用命令说明"></a>Hexo常用命令说明</h1><h2 id="初始化一个本地文件夹作为根目录"><a href="#初始化一个本地文件夹作为根目录" class="headerlink" title="初始化一个本地文件夹作为根目录"></a>初始化一个本地文件夹作为根目录</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></tbody></table></figure><p>详见：<a href="https://hexo.io/zh-cn/docs/setup">https://hexo.io/zh-cn/docs/setup</a></p><h2 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hexo.io/zh-cn/docs/setup</span><br></pre></td></tr></tbody></table></figure><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></tbody></table></figure><p>详情：<a href="https://hexo.io/zh-cn/docs/generating.html">https://hexo.io/zh-cn/docs/generating.html</a></p><h2 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">-p    选项，指定服务器端口，默认为 4000</span><br><span class="line">-i    选项，指定服务器 IP 地址，默认为 0.0.0.0</span><br><span class="line">-s    选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>详情：<a href="https://hexo.io/zh-cn/docs/one-command-deployment.html">https://hexo.io/zh-cn/docs/one-command-deployment.html</a></p><h2 id="清理缓存文件"><a href="#清理缓存文件" class="headerlink" title="清理缓存文件"></a>清理缓存文件</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></tbody></table></figure><h2 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --watch</span><br></pre></td></tr></tbody></table></figure><blockquote><p> Hexo能购监视文件变动并立刻重新生成静态文件，再生成时对比文件的 SHA1 checksum，只有变动的文件会写入</p></blockquote><h1 id="Hexo符合命令说明"><a href="#Hexo符合命令说明" class="headerlink" title="Hexo符合命令说明"></a>Hexo符合命令说明</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g          <span class="comment"># 生成加部署</span></span><br><span class="line">hexo d -g               <span class="comment"># 生成加部署</span></span><br><span class="line">hexo server -g          <span class="comment"># 生成加预览</span></span><br><span class="line">hexo s -g               <span class="comment"># 生成加预览</span></span><br></pre></td></tr></tbody></table></figure><h1 id="Hexo命令简写说明"><a href="#Hexo命令简写说明" class="headerlink" title="Hexo命令简写说明"></a>Hexo命令简写说明</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo n  == hexo new</span><br><span class="line">hexo g  == hexo generate</span><br><span class="line">hexo s  == hexo server</span><br><span class="line">hexo d  == hexo deploy</span><br><span class="line">hexo cl == hexo clean</span><br></pre></td></tr></tbody></table></figure><p>xo clean</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo和Github搭建个人博客</title>
      <link href="/posts/787e6168/"/>
      <url>/posts/787e6168/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>基于Hexo+Github搭建个人博客</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><blockquote><p>所需工具： node.js、npm、git</p></blockquote><p>node.js: <a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></p><p>git: <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>安装完成后，在终端下输入一下命令查看版本，以此判断是否安装成功</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></tbody></table></figure><h1 id="连接GitHub"><a href="#连接GitHub" class="headerlink" title="连接GitHub"></a>连接GitHub</h1><p>打开终端，输入命令设置用户名和邮箱</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"Github用户名"</span></span><br><span class="line">git config --global user.email <span class="string">"Github邮箱"</span></span><br></pre></td></tr></tbody></table></figure><p>创建SSH密钥</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"Github邮箱"</span></span><br></pre></td></tr></tbody></table></figure><p>mac生成到/Users/用户名/.shh目录，查看id_ras.pub公钥内容并复制文件内容</p><p>添加公钥内容到Github：Seeting -&gt; SSH and GPG keys -&gt; New SSH key</p><p>验证连接：</p><blockquote><p>打开终端，输入<code>ssh -T git@Github.com</code></p><p>显示 “Hi MaritimeByte! You’ve successfully authenticated, but GitHub does not provide shell access.”</p><p>连接成功</p></blockquote><h1 id="创建-GitHub-Pages"><a href="#创建-GitHub-Pages" class="headerlink" title="创建 GitHub Pages"></a>创建 GitHub Pages</h1><ol><li>在任何页面的右上角，选择 ，然后单击“新建存储库”</li><li>存储库必须命名为 <code>&lt;user&gt;.github.io</code></li><li>选择“使用 README 初始化此存储库”。</li><li>单击“创建存储库”</li></ol><h1 id="本地安装Hexo博客程序"><a href="#本地安装Hexo博客程序" class="headerlink" title="本地安装Hexo博客程序"></a>本地安装Hexo博客程序</h1><p>默认代理为<a href="https://registry.npmjs.org/%EF%BC%8C%E9%9C%80%E8%A6%81%E6%A2%AF%E5%AD%90%E6%89%8D%E8%83%BD%E8%AE%BF%E9%97%AE">https://registry.npmjs.org/，需要梯子才能访问</a></p><p>修改代理</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure><p>安装Hexo</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></tbody></table></figure><p>macOS会存在全局安装和本地安装问题，可使用npx解决npm无法调用hexo的问题</p><h1 id="hexo初始化和本地预览"><a href="#hexo初始化和本地预览" class="headerlink" title="hexo初始化和本地预览"></a>hexo初始化和本地预览</h1><p>初始化及安装组件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init       <span class="comment"># 初始化</span></span><br><span class="line">npm install     <span class="comment"># 安装组件</span></span><br></pre></td></tr></tbody></table></figure><p>启动本地服务进行预览</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g          <span class="comment"># 生成页面</span></span><br><span class="line">hexo s          <span class="comment"># 启动预览</span></span><br></pre></td></tr></tbody></table></figure><p>博客目录结构</p><blockquote><ul><li>.</li><li>_config.landscape.yml</li><li>_config.yml</li><li>node_modules</li><li>package-lock.json</li><li>package-json</li><li>scaffolds</li><li>source</li><li>themes</li></ul></blockquote><ul><li>_config.yml：全局配置文件，比如网站名称，副标题，秒速，作者，语言等。</li><li>scaffolds：骨架文件，生成新页面或者新博客的模版。可根据需求修改，当hexo生成新博客时，会用这里面的模版进行初始化</li><li>source：存放markdown源文件，里面有一个_post文件夹，所有的。md博客文件都会存放在这，初始存在一个hello-world.md文件 </li><li>themes：网站主题目录存放主题文件，更多主题查看：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></li></ul><h1 id="部署Hexo到GitHubPages"><a href="#部署Hexo到GitHubPages" class="headerlink" title="部署Hexo到GitHubPages"></a>部署Hexo到GitHubPages</h1><p>安装hexo- deploy-git：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure><p>修改_config.yml文件末尾的Deployment部分，如下</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@Github.com:用户名/用户名.Github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></tbody></table></figure><p>运行 <code>hexo d</code>部署</p><p>mac可能需要使用<code>npx hexo deploy</code>部署</p><p>恭喜🎉，你的博客已经部署到github上，可通过https://用户名.github.io访问了</p><h1 id="发布第一篇文章"><a href="#发布第一篇文章" class="headerlink" title="发布第一篇文章"></a>发布第一篇文章</h1><p>在blog根目录下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(npx) hexo new <span class="string">"First post"</span></span><br></pre></td></tr></tbody></table></figure><p>source目录下会生成一个名为First post.md文件</p><p>也可在post文件夹下直接生成md文件，如例：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 基于Hexo + Github搭建个人博客</span><br><span class="line"><span class="built_in">date</span>: 2022-11-06 07:35:15</span><br><span class="line">tags:</span><br><span class="line">  - other</span><br><span class="line">keywords:</span><br><span class="line">  - hexo</span><br><span class="line">  - Github</span><br><span class="line">  - blog</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">正文</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>恭喜🎉你完成了最后的一步，你Hexo博客的已经搭建成功啦！！！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
